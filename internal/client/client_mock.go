// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/internal/client/client.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophkeeper/internal/models"
)

// MockRegisterer is a mock of Registerer interface.
type MockRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockRegistererMockRecorder
}

// MockRegistererMockRecorder is the mock recorder for MockRegisterer.
type MockRegistererMockRecorder struct {
	mock *MockRegisterer
}

// NewMockRegisterer creates a new mock instance.
func NewMockRegisterer(ctrl *gomock.Controller) *MockRegisterer {
	mock := &MockRegisterer{ctrl: ctrl}
	mock.recorder = &MockRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterer) EXPECT() *MockRegistererMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterer) Register(ctx context.Context, username, password string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, username, password)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegistererMockRecorder) Register(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterer)(nil).Register), ctx, username, password)
}

// MockLoginer is a mock of Loginer interface.
type MockLoginer struct {
	ctrl     *gomock.Controller
	recorder *MockLoginerMockRecorder
}

// MockLoginerMockRecorder is the mock recorder for MockLoginer.
type MockLoginerMockRecorder struct {
	mock *MockLoginer
}

// NewMockLoginer creates a new mock instance.
func NewMockLoginer(ctrl *gomock.Controller) *MockLoginer {
	mock := &MockLoginer{ctrl: ctrl}
	mock.recorder = &MockLoginerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginer) EXPECT() *MockLoginerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginer) Login(ctx context.Context, username, password string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginerMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginer)(nil).Login), ctx, username, password)
}

// MockEncryptor is a mock of Encryptor interface.
type MockEncryptor struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptorMockRecorder
}

// MockEncryptorMockRecorder is the mock recorder for MockEncryptor.
type MockEncryptorMockRecorder struct {
	mock *MockEncryptor
}

// NewMockEncryptor creates a new mock instance.
func NewMockEncryptor(ctrl *gomock.Controller) *MockEncryptor {
	mock := &MockEncryptor{ctrl: ctrl}
	mock.recorder = &MockEncryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptor) EXPECT() *MockEncryptorMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockEncryptor) Encrypt(plaintext []byte) (*models.SecretSecretEncrypted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", plaintext)
	ret0, _ := ret[0].(*models.SecretSecretEncrypted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptorMockRecorder) Encrypt(plaintext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptor)(nil).Encrypt), plaintext)
}

// MockDecryptor is a mock of Decryptor interface.
type MockDecryptor struct {
	ctrl     *gomock.Controller
	recorder *MockDecryptorMockRecorder
}

// MockDecryptorMockRecorder is the mock recorder for MockDecryptor.
type MockDecryptorMockRecorder struct {
	mock *MockDecryptor
}

// NewMockDecryptor creates a new mock instance.
func NewMockDecryptor(ctrl *gomock.Controller) *MockDecryptor {
	mock := &MockDecryptor{ctrl: ctrl}
	mock.recorder = &MockDecryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecryptor) EXPECT() *MockDecryptorMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockDecryptor) Decrypt(secret *models.SecretSecretEncrypted) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", secret)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockDecryptorMockRecorder) Decrypt(secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockDecryptor)(nil).Decrypt), secret)
}

// MockClientSaver is a mock of ClientSaver interface.
type MockClientSaver struct {
	ctrl     *gomock.Controller
	recorder *MockClientSaverMockRecorder
}

// MockClientSaverMockRecorder is the mock recorder for MockClientSaver.
type MockClientSaverMockRecorder struct {
	mock *MockClientSaver
}

// NewMockClientSaver creates a new mock instance.
func NewMockClientSaver(ctrl *gomock.Controller) *MockClientSaver {
	mock := &MockClientSaver{ctrl: ctrl}
	mock.recorder = &MockClientSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientSaver) EXPECT() *MockClientSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockClientSaver) Save(ctx context.Context, secretOwner, secretName, secretType string, ciphertext, aesKeyEnc []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, secretOwner, secretName, secretType, ciphertext, aesKeyEnc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockClientSaverMockRecorder) Save(ctx, secretOwner, secretName, secretType, ciphertext, aesKeyEnc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockClientSaver)(nil).Save), ctx, secretOwner, secretName, secretType, ciphertext, aesKeyEnc)
}

// MockClientLister is a mock of ClientLister interface.
type MockClientLister struct {
	ctrl     *gomock.Controller
	recorder *MockClientListerMockRecorder
}

// MockClientListerMockRecorder is the mock recorder for MockClientLister.
type MockClientListerMockRecorder struct {
	mock *MockClientLister
}

// NewMockClientLister creates a new mock instance.
func NewMockClientLister(ctrl *gomock.Controller) *MockClientLister {
	mock := &MockClientLister{ctrl: ctrl}
	mock.recorder = &MockClientListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientLister) EXPECT() *MockClientListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockClientLister) List(ctx context.Context, secretOwner string) ([]*models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, secretOwner)
	ret0, _ := ret[0].([]*models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClientListerMockRecorder) List(ctx, secretOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClientLister)(nil).List), ctx, secretOwner)
}

// MockServerGetter is a mock of ServerGetter interface.
type MockServerGetter struct {
	ctrl     *gomock.Controller
	recorder *MockServerGetterMockRecorder
}

// MockServerGetterMockRecorder is the mock recorder for MockServerGetter.
type MockServerGetterMockRecorder struct {
	mock *MockServerGetter
}

// NewMockServerGetter creates a new mock instance.
func NewMockServerGetter(ctrl *gomock.Controller) *MockServerGetter {
	mock := &MockServerGetter{ctrl: ctrl}
	mock.recorder = &MockServerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerGetter) EXPECT() *MockServerGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServerGetter) Get(ctx context.Context, secretOwner, secretType, secretName string) (*models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, secretOwner, secretType, secretName)
	ret0, _ := ret[0].(*models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServerGetterMockRecorder) Get(ctx, secretOwner, secretType, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerGetter)(nil).Get), ctx, secretOwner, secretType, secretName)
}

// MockServerLister is a mock of ServerLister interface.
type MockServerLister struct {
	ctrl     *gomock.Controller
	recorder *MockServerListerMockRecorder
}

// MockServerListerMockRecorder is the mock recorder for MockServerLister.
type MockServerListerMockRecorder struct {
	mock *MockServerLister
}

// NewMockServerLister creates a new mock instance.
func NewMockServerLister(ctrl *gomock.Controller) *MockServerLister {
	mock := &MockServerLister{ctrl: ctrl}
	mock.recorder = &MockServerListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerLister) EXPECT() *MockServerListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockServerLister) List(ctx context.Context, secretOwner string) ([]*models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, secretOwner)
	ret0, _ := ret[0].([]*models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServerListerMockRecorder) List(ctx, secretOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServerLister)(nil).List), ctx, secretOwner)
}

// MockServerSaver is a mock of ServerSaver interface.
type MockServerSaver struct {
	ctrl     *gomock.Controller
	recorder *MockServerSaverMockRecorder
}

// MockServerSaverMockRecorder is the mock recorder for MockServerSaver.
type MockServerSaverMockRecorder struct {
	mock *MockServerSaver
}

// NewMockServerSaver creates a new mock instance.
func NewMockServerSaver(ctrl *gomock.Controller) *MockServerSaver {
	mock := &MockServerSaver{ctrl: ctrl}
	mock.recorder = &MockServerSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerSaver) EXPECT() *MockServerSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockServerSaver) Save(ctx context.Context, secretOwner, secretName, secretType string, ciphertext, aesKeyEnc []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, secretOwner, secretName, secretType, ciphertext, aesKeyEnc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockServerSaverMockRecorder) Save(ctx, secretOwner, secretName, secretType, ciphertext, aesKeyEnc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockServerSaver)(nil).Save), ctx, secretOwner, secretName, secretType, ciphertext, aesKeyEnc)
}

// MockClientResolver is a mock of ClientResolver interface.
type MockClientResolver struct {
	ctrl     *gomock.Controller
	recorder *MockClientResolverMockRecorder
}

// MockClientResolverMockRecorder is the mock recorder for MockClientResolver.
type MockClientResolverMockRecorder struct {
	mock *MockClientResolver
}

// NewMockClientResolver creates a new mock instance.
func NewMockClientResolver(ctrl *gomock.Controller) *MockClientResolver {
	mock := &MockClientResolver{ctrl: ctrl}
	mock.recorder = &MockClientResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientResolver) EXPECT() *MockClientResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockClientResolver) Resolve(ctx context.Context, secretOwner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, secretOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockClientResolverMockRecorder) Resolve(ctx, secretOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockClientResolver)(nil).Resolve), ctx, secretOwner)
}

// MockInteractiveResolver is a mock of InteractiveResolver interface.
type MockInteractiveResolver struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveResolverMockRecorder
}

// MockInteractiveResolverMockRecorder is the mock recorder for MockInteractiveResolver.
type MockInteractiveResolverMockRecorder struct {
	mock *MockInteractiveResolver
}

// NewMockInteractiveResolver creates a new mock instance.
func NewMockInteractiveResolver(ctrl *gomock.Controller) *MockInteractiveResolver {
	mock := &MockInteractiveResolver{ctrl: ctrl}
	mock.recorder = &MockInteractiveResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveResolver) EXPECT() *MockInteractiveResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockInteractiveResolver) Resolve(ctx context.Context, secretOwner string, reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, secretOwner, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockInteractiveResolverMockRecorder) Resolve(ctx, secretOwner, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockInteractiveResolver)(nil).Resolve), ctx, secretOwner, reader)
}
