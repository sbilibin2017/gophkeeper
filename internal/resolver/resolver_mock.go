// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/internal/resolver/resolver.go

// Package resolver is a generated GoMock package.
package resolver

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophkeeper/internal/models"
)

// MockClientLister is a mock of ClientLister interface.
type MockClientLister struct {
	ctrl     *gomock.Controller
	recorder *MockClientListerMockRecorder
}

// MockClientListerMockRecorder is the mock recorder for MockClientLister.
type MockClientListerMockRecorder struct {
	mock *MockClientLister
}

// NewMockClientLister creates a new mock instance.
func NewMockClientLister(ctrl *gomock.Controller) *MockClientLister {
	mock := &MockClientLister{ctrl: ctrl}
	mock.recorder = &MockClientListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientLister) EXPECT() *MockClientListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockClientLister) List(ctx context.Context, secretOwner string) ([]*models.SecretDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, secretOwner)
	ret0, _ := ret[0].([]*models.SecretDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClientListerMockRecorder) List(ctx, secretOwner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClientLister)(nil).List), ctx, secretOwner)
}

// MockServerSaver is a mock of ServerSaver interface.
type MockServerSaver struct {
	ctrl     *gomock.Controller
	recorder *MockServerSaverMockRecorder
}

// MockServerSaverMockRecorder is the mock recorder for MockServerSaver.
type MockServerSaverMockRecorder struct {
	mock *MockServerSaver
}

// NewMockServerSaver creates a new mock instance.
func NewMockServerSaver(ctrl *gomock.Controller) *MockServerSaver {
	mock := &MockServerSaver{ctrl: ctrl}
	mock.recorder = &MockServerSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerSaver) EXPECT() *MockServerSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockServerSaver) Save(ctx context.Context, secretOwner, secretName, secretType string, ciphertext, aesKeyEnc []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, secretOwner, secretName, secretType, ciphertext, aesKeyEnc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockServerSaverMockRecorder) Save(ctx, secretOwner, secretName, secretType, ciphertext, aesKeyEnc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockServerSaver)(nil).Save), ctx, secretOwner, secretName, secretType, ciphertext, aesKeyEnc)
}

// MockServerGetter is a mock of ServerGetter interface.
type MockServerGetter struct {
	ctrl     *gomock.Controller
	recorder *MockServerGetterMockRecorder
}

// MockServerGetterMockRecorder is the mock recorder for MockServerGetter.
type MockServerGetterMockRecorder struct {
	mock *MockServerGetter
}

// NewMockServerGetter creates a new mock instance.
func NewMockServerGetter(ctrl *gomock.Controller) *MockServerGetter {
	mock := &MockServerGetter{ctrl: ctrl}
	mock.recorder = &MockServerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerGetter) EXPECT() *MockServerGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServerGetter) Get(ctx context.Context, secretOwner, secretName, secretType string) (*models.SecretDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, secretOwner, secretName, secretType)
	ret0, _ := ret[0].(*models.SecretDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServerGetterMockRecorder) Get(ctx, secretOwner, secretName, secretType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerGetter)(nil).Get), ctx, secretOwner, secretName, secretType)
}

// MockDecryptor is a mock of Decryptor interface.
type MockDecryptor struct {
	ctrl     *gomock.Controller
	recorder *MockDecryptorMockRecorder
}

// MockDecryptorMockRecorder is the mock recorder for MockDecryptor.
type MockDecryptorMockRecorder struct {
	mock *MockDecryptor
}

// NewMockDecryptor creates a new mock instance.
func NewMockDecryptor(ctrl *gomock.Controller) *MockDecryptor {
	mock := &MockDecryptor{ctrl: ctrl}
	mock.recorder = &MockDecryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecryptor) EXPECT() *MockDecryptorMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockDecryptor) Decrypt(enc *models.SecretEncrypted) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", enc)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockDecryptorMockRecorder) Decrypt(enc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockDecryptor)(nil).Decrypt), enc)
}
