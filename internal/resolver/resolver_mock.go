// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/internal/resolver/resolver.go

// Package resolver is a generated GoMock package.
package resolver

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cryptor "github.com/sbilibin2017/gophkeeper/internal/cryptor"
	models "github.com/sbilibin2017/gophkeeper/internal/models"
)

// MockClientSecretReader is a mock of ClientSecretReader interface.
type MockClientSecretReader struct {
	ctrl     *gomock.Controller
	recorder *MockClientSecretReaderMockRecorder
}

// MockClientSecretReaderMockRecorder is the mock recorder for MockClientSecretReader.
type MockClientSecretReaderMockRecorder struct {
	mock *MockClientSecretReader
}

// NewMockClientSecretReader creates a new mock instance.
func NewMockClientSecretReader(ctrl *gomock.Controller) *MockClientSecretReader {
	mock := &MockClientSecretReader{ctrl: ctrl}
	mock.recorder = &MockClientSecretReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientSecretReader) EXPECT() *MockClientSecretReaderMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockClientSecretReader) List(ctx context.Context) ([]*models.EncryptedSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*models.EncryptedSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClientSecretReaderMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClientSecretReader)(nil).List), ctx)
}

// MockServerSecretReader is a mock of ServerSecretReader interface.
type MockServerSecretReader struct {
	ctrl     *gomock.Controller
	recorder *MockServerSecretReaderMockRecorder
}

// MockServerSecretReaderMockRecorder is the mock recorder for MockServerSecretReader.
type MockServerSecretReaderMockRecorder struct {
	mock *MockServerSecretReader
}

// NewMockServerSecretReader creates a new mock instance.
func NewMockServerSecretReader(ctrl *gomock.Controller) *MockServerSecretReader {
	mock := &MockServerSecretReader{ctrl: ctrl}
	mock.recorder = &MockServerSecretReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerSecretReader) EXPECT() *MockServerSecretReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServerSecretReader) Get(ctx context.Context, secretName string) (*models.EncryptedSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, secretName)
	ret0, _ := ret[0].(*models.EncryptedSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServerSecretReaderMockRecorder) Get(ctx, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerSecretReader)(nil).Get), ctx, secretName)
}

// MockServerSecretWriter is a mock of ServerSecretWriter interface.
type MockServerSecretWriter struct {
	ctrl     *gomock.Controller
	recorder *MockServerSecretWriterMockRecorder
}

// MockServerSecretWriterMockRecorder is the mock recorder for MockServerSecretWriter.
type MockServerSecretWriterMockRecorder struct {
	mock *MockServerSecretWriter
}

// NewMockServerSecretWriter creates a new mock instance.
func NewMockServerSecretWriter(ctrl *gomock.Controller) *MockServerSecretWriter {
	mock := &MockServerSecretWriter{ctrl: ctrl}
	mock.recorder = &MockServerSecretWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerSecretWriter) EXPECT() *MockServerSecretWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockServerSecretWriter) Save(ctx context.Context, secret *models.EncryptedSecret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockServerSecretWriterMockRecorder) Save(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockServerSecretWriter)(nil).Save), ctx, secret)
}

// MockCryptor is a mock of Cryptor interface.
type MockCryptor struct {
	ctrl     *gomock.Controller
	recorder *MockCryptorMockRecorder
}

// MockCryptorMockRecorder is the mock recorder for MockCryptor.
type MockCryptorMockRecorder struct {
	mock *MockCryptor
}

// NewMockCryptor creates a new mock instance.
func NewMockCryptor(ctrl *gomock.Controller) *MockCryptor {
	mock := &MockCryptor{ctrl: ctrl}
	mock.recorder = &MockCryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptor) EXPECT() *MockCryptorMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCryptor) Decrypt(enc *cryptor.Encrypted) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", enc)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCryptorMockRecorder) Decrypt(enc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCryptor)(nil).Decrypt), enc)
}
