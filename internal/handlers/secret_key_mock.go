// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/internal/handlers/secret_key.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophkeeper/internal/models"
)

// MockSecretKeyTokenDecoder is a mock of SecretKeyTokenDecoder interface.
type MockSecretKeyTokenDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockSecretKeyTokenDecoderMockRecorder
}

// MockSecretKeyTokenDecoderMockRecorder is the mock recorder for MockSecretKeyTokenDecoder.
type MockSecretKeyTokenDecoderMockRecorder struct {
	mock *MockSecretKeyTokenDecoder
}

// NewMockSecretKeyTokenDecoder creates a new mock instance.
func NewMockSecretKeyTokenDecoder(ctrl *gomock.Controller) *MockSecretKeyTokenDecoder {
	mock := &MockSecretKeyTokenDecoder{ctrl: ctrl}
	mock.recorder = &MockSecretKeyTokenDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretKeyTokenDecoder) EXPECT() *MockSecretKeyTokenDecoderMockRecorder {
	return m.recorder
}

// GetFromRequest mocks base method.
func (m *MockSecretKeyTokenDecoder) GetFromRequest(req *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromRequest", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromRequest indicates an expected call of GetFromRequest.
func (mr *MockSecretKeyTokenDecoderMockRecorder) GetFromRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromRequest", reflect.TypeOf((*MockSecretKeyTokenDecoder)(nil).GetFromRequest), req)
}

// Parse mocks base method.
func (m *MockSecretKeyTokenDecoder) Parse(tokenString string) (*models.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", tokenString)
	ret0, _ := ret[0].(*models.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockSecretKeyTokenDecoderMockRecorder) Parse(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockSecretKeyTokenDecoder)(nil).Parse), tokenString)
}

// MockSecretKeyWriter is a mock of SecretKeyWriter interface.
type MockSecretKeyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSecretKeyWriterMockRecorder
}

// MockSecretKeyWriterMockRecorder is the mock recorder for MockSecretKeyWriter.
type MockSecretKeyWriterMockRecorder struct {
	mock *MockSecretKeyWriter
}

// NewMockSecretKeyWriter creates a new mock instance.
func NewMockSecretKeyWriter(ctrl *gomock.Controller) *MockSecretKeyWriter {
	mock := &MockSecretKeyWriter{ctrl: ctrl}
	mock.recorder = &MockSecretKeyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretKeyWriter) EXPECT() *MockSecretKeyWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockSecretKeyWriter) Save(ctx context.Context, secretKey *models.SecretKeyDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, secretKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSecretKeyWriterMockRecorder) Save(ctx, secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSecretKeyWriter)(nil).Save), ctx, secretKey)
}

// MockSecretKeyGetter is a mock of SecretKeyGetter interface.
type MockSecretKeyGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSecretKeyGetterMockRecorder
}

// MockSecretKeyGetterMockRecorder is the mock recorder for MockSecretKeyGetter.
type MockSecretKeyGetterMockRecorder struct {
	mock *MockSecretKeyGetter
}

// NewMockSecretKeyGetter creates a new mock instance.
func NewMockSecretKeyGetter(ctrl *gomock.Controller) *MockSecretKeyGetter {
	mock := &MockSecretKeyGetter{ctrl: ctrl}
	mock.recorder = &MockSecretKeyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretKeyGetter) EXPECT() *MockSecretKeyGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSecretKeyGetter) Get(ctx context.Context, secretID, deviceID string) (*models.SecretKeyDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, secretID, deviceID)
	ret0, _ := ret[0].(*models.SecretKeyDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretKeyGetterMockRecorder) Get(ctx, secretID, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretKeyGetter)(nil).Get), ctx, secretID, deviceID)
}
