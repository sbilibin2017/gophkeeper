// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/internal/handlers/secret.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophkeeper/internal/models"
)

// MockSecretTokenDecoder is a mock of SecretTokenDecoder interface.
type MockSecretTokenDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockSecretTokenDecoderMockRecorder
}

// MockSecretTokenDecoderMockRecorder is the mock recorder for MockSecretTokenDecoder.
type MockSecretTokenDecoderMockRecorder struct {
	mock *MockSecretTokenDecoder
}

// NewMockSecretTokenDecoder creates a new mock instance.
func NewMockSecretTokenDecoder(ctrl *gomock.Controller) *MockSecretTokenDecoder {
	mock := &MockSecretTokenDecoder{ctrl: ctrl}
	mock.recorder = &MockSecretTokenDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretTokenDecoder) EXPECT() *MockSecretTokenDecoderMockRecorder {
	return m.recorder
}

// GetFromRequest mocks base method.
func (m *MockSecretTokenDecoder) GetFromRequest(req *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromRequest", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromRequest indicates an expected call of GetFromRequest.
func (mr *MockSecretTokenDecoderMockRecorder) GetFromRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromRequest", reflect.TypeOf((*MockSecretTokenDecoder)(nil).GetFromRequest), req)
}

// Parse mocks base method.
func (m *MockSecretTokenDecoder) Parse(tokenString string) (*models.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", tokenString)
	ret0, _ := ret[0].(*models.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockSecretTokenDecoderMockRecorder) Parse(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockSecretTokenDecoder)(nil).Parse), tokenString)
}

// MockSecretWriter is a mock of SecretWriter interface.
type MockSecretWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSecretWriterMockRecorder
}

// MockSecretWriterMockRecorder is the mock recorder for MockSecretWriter.
type MockSecretWriterMockRecorder struct {
	mock *MockSecretWriter
}

// NewMockSecretWriter creates a new mock instance.
func NewMockSecretWriter(ctrl *gomock.Controller) *MockSecretWriter {
	mock := &MockSecretWriter{ctrl: ctrl}
	mock.recorder = &MockSecretWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretWriter) EXPECT() *MockSecretWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockSecretWriter) Save(ctx context.Context, secret *models.SecretDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSecretWriterMockRecorder) Save(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSecretWriter)(nil).Save), ctx, secret)
}

// MockSecretReader is a mock of SecretReader interface.
type MockSecretReader struct {
	ctrl     *gomock.Controller
	recorder *MockSecretReaderMockRecorder
}

// MockSecretReaderMockRecorder is the mock recorder for MockSecretReader.
type MockSecretReaderMockRecorder struct {
	mock *MockSecretReader
}

// NewMockSecretReader creates a new mock instance.
func NewMockSecretReader(ctrl *gomock.Controller) *MockSecretReader {
	mock := &MockSecretReader{ctrl: ctrl}
	mock.recorder = &MockSecretReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretReader) EXPECT() *MockSecretReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSecretReader) Get(ctx context.Context, userID, secretID string) (*models.SecretDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, secretID)
	ret0, _ := ret[0].(*models.SecretDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretReaderMockRecorder) Get(ctx, userID, secretID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretReader)(nil).Get), ctx, userID, secretID)
}

// List mocks base method.
func (m *MockSecretReader) List(ctx context.Context, userID string) ([]*models.SecretDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID)
	ret0, _ := ret[0].([]*models.SecretDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretReaderMockRecorder) List(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretReader)(nil).List), ctx, userID)
}
