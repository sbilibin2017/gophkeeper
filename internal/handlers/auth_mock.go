// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/internal/handlers/auth.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophkeeper/internal/models"
)

// MockTokener is a mock of Tokener interface.
type MockTokener struct {
	ctrl     *gomock.Controller
	recorder *MockTokenerMockRecorder
}

// MockTokenerMockRecorder is the mock recorder for MockTokener.
type MockTokenerMockRecorder struct {
	mock *MockTokener
}

// NewMockTokener creates a new mock instance.
func NewMockTokener(ctrl *gomock.Controller) *MockTokener {
	mock := &MockTokener{ctrl: ctrl}
	mock.recorder = &MockTokenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokener) EXPECT() *MockTokenerMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTokener) Generate(userID, deviceID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", userID, deviceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockTokenerMockRecorder) Generate(userID, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokener)(nil).Generate), userID, deviceID)
}

// SetHeader mocks base method.
func (m *MockTokener) SetHeader(w http.ResponseWriter, token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", w, token)
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockTokenerMockRecorder) SetHeader(w, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockTokener)(nil).SetHeader), w, token)
}

// MockUserReader is a mock of UserReader interface.
type MockUserReader struct {
	ctrl     *gomock.Controller
	recorder *MockUserReaderMockRecorder
}

// MockUserReaderMockRecorder is the mock recorder for MockUserReader.
type MockUserReaderMockRecorder struct {
	mock *MockUserReader
}

// NewMockUserReader creates a new mock instance.
func NewMockUserReader(ctrl *gomock.Controller) *MockUserReader {
	mock := &MockUserReader{ctrl: ctrl}
	mock.recorder = &MockUserReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReader) EXPECT() *MockUserReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserReader) Get(ctx context.Context, username string) (*models.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, username)
	ret0, _ := ret[0].(*models.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserReaderMockRecorder) Get(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserReader)(nil).Get), ctx, username)
}

// MockUserWriter is a mock of UserWriter interface.
type MockUserWriter struct {
	ctrl     *gomock.Controller
	recorder *MockUserWriterMockRecorder
}

// MockUserWriterMockRecorder is the mock recorder for MockUserWriter.
type MockUserWriterMockRecorder struct {
	mock *MockUserWriter
}

// NewMockUserWriter creates a new mock instance.
func NewMockUserWriter(ctrl *gomock.Controller) *MockUserWriter {
	mock := &MockUserWriter{ctrl: ctrl}
	mock.recorder = &MockUserWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserWriter) EXPECT() *MockUserWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockUserWriter) Save(ctx context.Context, userID, username, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, userID, username, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserWriterMockRecorder) Save(ctx, userID, username, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserWriter)(nil).Save), ctx, userID, username, passwordHash)
}

// MockDeviceWriter is a mock of DeviceWriter interface.
type MockDeviceWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceWriterMockRecorder
}

// MockDeviceWriterMockRecorder is the mock recorder for MockDeviceWriter.
type MockDeviceWriterMockRecorder struct {
	mock *MockDeviceWriter
}

// NewMockDeviceWriter creates a new mock instance.
func NewMockDeviceWriter(ctrl *gomock.Controller) *MockDeviceWriter {
	mock := &MockDeviceWriter{ctrl: ctrl}
	mock.recorder = &MockDeviceWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceWriter) EXPECT() *MockDeviceWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockDeviceWriter) Save(ctx context.Context, userID, deviceID, publicKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, userID, deviceID, publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDeviceWriterMockRecorder) Save(ctx, userID, deviceID, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDeviceWriter)(nil).Save), ctx, userID, deviceID, publicKey)
}

// MockRSAGenerator is a mock of RSAGenerator interface.
type MockRSAGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRSAGeneratorMockRecorder
}

// MockRSAGeneratorMockRecorder is the mock recorder for MockRSAGenerator.
type MockRSAGeneratorMockRecorder struct {
	mock *MockRSAGenerator
}

// NewMockRSAGenerator creates a new mock instance.
func NewMockRSAGenerator(ctrl *gomock.Controller) *MockRSAGenerator {
	mock := &MockRSAGenerator{ctrl: ctrl}
	mock.recorder = &MockRSAGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRSAGenerator) EXPECT() *MockRSAGeneratorMockRecorder {
	return m.recorder
}

// GenerateKeyPair mocks base method.
func (m *MockRSAGenerator) GenerateKeyPair() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeyPair")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateKeyPair indicates an expected call of GenerateKeyPair.
func (mr *MockRSAGeneratorMockRecorder) GenerateKeyPair() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeyPair", reflect.TypeOf((*MockRSAGenerator)(nil).GenerateKeyPair))
}

// MockPasswordHasher is a mock of PasswordHasher interface.
type MockPasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordHasherMockRecorder
}

// MockPasswordHasherMockRecorder is the mock recorder for MockPasswordHasher.
type MockPasswordHasherMockRecorder struct {
	mock *MockPasswordHasher
}

// NewMockPasswordHasher creates a new mock instance.
func NewMockPasswordHasher(ctrl *gomock.Controller) *MockPasswordHasher {
	mock := &MockPasswordHasher{ctrl: ctrl}
	mock.recorder = &MockPasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordHasher) EXPECT() *MockPasswordHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockPasswordHasher) Hash(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockPasswordHasherMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockPasswordHasher)(nil).Hash), password)
}
