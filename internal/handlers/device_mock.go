// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/internal/handlers/device.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophkeeper/internal/models"
)

// MockTokenDecoder is a mock of TokenDecoder interface.
type MockTokenDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockTokenDecoderMockRecorder
}

// MockTokenDecoderMockRecorder is the mock recorder for MockTokenDecoder.
type MockTokenDecoderMockRecorder struct {
	mock *MockTokenDecoder
}

// NewMockTokenDecoder creates a new mock instance.
func NewMockTokenDecoder(ctrl *gomock.Controller) *MockTokenDecoder {
	mock := &MockTokenDecoder{ctrl: ctrl}
	mock.recorder = &MockTokenDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenDecoder) EXPECT() *MockTokenDecoderMockRecorder {
	return m.recorder
}

// GetFromRequest mocks base method.
func (m *MockTokenDecoder) GetFromRequest(req *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromRequest", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromRequest indicates an expected call of GetFromRequest.
func (mr *MockTokenDecoderMockRecorder) GetFromRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromRequest", reflect.TypeOf((*MockTokenDecoder)(nil).GetFromRequest), req)
}

// Parse mocks base method.
func (m *MockTokenDecoder) Parse(tokenString string) (*models.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", tokenString)
	ret0, _ := ret[0].(*models.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockTokenDecoderMockRecorder) Parse(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockTokenDecoder)(nil).Parse), tokenString)
}

// MockDeviceGetter is a mock of DeviceGetter interface.
type MockDeviceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceGetterMockRecorder
}

// MockDeviceGetterMockRecorder is the mock recorder for MockDeviceGetter.
type MockDeviceGetterMockRecorder struct {
	mock *MockDeviceGetter
}

// NewMockDeviceGetter creates a new mock instance.
func NewMockDeviceGetter(ctrl *gomock.Controller) *MockDeviceGetter {
	mock := &MockDeviceGetter{ctrl: ctrl}
	mock.recorder = &MockDeviceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceGetter) EXPECT() *MockDeviceGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDeviceGetter) Get(ctx context.Context, userID, deviceID string) (*models.DeviceDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, deviceID)
	ret0, _ := ret[0].(*models.DeviceDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeviceGetterMockRecorder) Get(ctx, userID, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeviceGetter)(nil).Get), ctx, userID, deviceID)
}
