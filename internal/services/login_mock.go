// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/internal/services/login.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophkeeper/internal/models"
)

// MockLoginer is a mock of Loginer interface.
type MockLoginer struct {
	ctrl     *gomock.Controller
	recorder *MockLoginerMockRecorder
}

// MockLoginerMockRecorder is the mock recorder for MockLoginer.
type MockLoginerMockRecorder struct {
	mock *MockLoginer
}

// NewMockLoginer creates a new mock instance.
func NewMockLoginer(ctrl *gomock.Controller) *MockLoginer {
	mock := &MockLoginer{ctrl: ctrl}
	mock.recorder = &MockLoginerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginer) EXPECT() *MockLoginerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginer) Login(ctx context.Context, creds *models.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, creds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockLoginerMockRecorder) Login(ctx, creds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginer)(nil).Login), ctx, creds)
}
