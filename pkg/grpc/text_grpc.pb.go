// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: text.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TextAddService_Add_FullMethodName = "/text.TextAddService/Add"
)

// TextAddServiceClient is the client API for TextAddService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextAddServiceClient interface {
	Add(ctx context.Context, in *TextAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type textAddServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextAddServiceClient(cc grpc.ClientConnInterface) TextAddServiceClient {
	return &textAddServiceClient{cc}
}

func (c *textAddServiceClient) Add(ctx context.Context, in *TextAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TextAddService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextAddServiceServer is the server API for TextAddService service.
// All implementations must embed UnimplementedTextAddServiceServer
// for forward compatibility.
type TextAddServiceServer interface {
	Add(context.Context, *TextAddRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTextAddServiceServer()
}

// UnimplementedTextAddServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextAddServiceServer struct{}

func (UnimplementedTextAddServiceServer) Add(context.Context, *TextAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTextAddServiceServer) mustEmbedUnimplementedTextAddServiceServer() {}
func (UnimplementedTextAddServiceServer) testEmbeddedByValue()                        {}

// UnsafeTextAddServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextAddServiceServer will
// result in compilation errors.
type UnsafeTextAddServiceServer interface {
	mustEmbedUnimplementedTextAddServiceServer()
}

func RegisterTextAddServiceServer(s grpc.ServiceRegistrar, srv TextAddServiceServer) {
	// If the following call pancis, it indicates UnimplementedTextAddServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextAddService_ServiceDesc, srv)
}

func _TextAddService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextAddServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextAddService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextAddServiceServer).Add(ctx, req.(*TextAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextAddService_ServiceDesc is the grpc.ServiceDesc for TextAddService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextAddService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text.TextAddService",
	HandlerType: (*TextAddServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _TextAddService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "text.proto",
}

const (
	TextGetService_Get_FullMethodName = "/text.TextGetService/Get"
)

// TextGetServiceClient is the client API for TextGetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextGetServiceClient interface {
	Get(ctx context.Context, in *TextGetRequest, opts ...grpc.CallOption) (*TextGetResponse, error)
}

type textGetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextGetServiceClient(cc grpc.ClientConnInterface) TextGetServiceClient {
	return &textGetServiceClient{cc}
}

func (c *textGetServiceClient) Get(ctx context.Context, in *TextGetRequest, opts ...grpc.CallOption) (*TextGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextGetResponse)
	err := c.cc.Invoke(ctx, TextGetService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextGetServiceServer is the server API for TextGetService service.
// All implementations must embed UnimplementedTextGetServiceServer
// for forward compatibility.
type TextGetServiceServer interface {
	Get(context.Context, *TextGetRequest) (*TextGetResponse, error)
	mustEmbedUnimplementedTextGetServiceServer()
}

// UnimplementedTextGetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextGetServiceServer struct{}

func (UnimplementedTextGetServiceServer) Get(context.Context, *TextGetRequest) (*TextGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTextGetServiceServer) mustEmbedUnimplementedTextGetServiceServer() {}
func (UnimplementedTextGetServiceServer) testEmbeddedByValue()                        {}

// UnsafeTextGetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextGetServiceServer will
// result in compilation errors.
type UnsafeTextGetServiceServer interface {
	mustEmbedUnimplementedTextGetServiceServer()
}

func RegisterTextGetServiceServer(s grpc.ServiceRegistrar, srv TextGetServiceServer) {
	// If the following call pancis, it indicates UnimplementedTextGetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextGetService_ServiceDesc, srv)
}

func _TextGetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextGetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextGetService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextGetServiceServer).Get(ctx, req.(*TextGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextGetService_ServiceDesc is the grpc.ServiceDesc for TextGetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextGetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text.TextGetService",
	HandlerType: (*TextGetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TextGetService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "text.proto",
}

const (
	TextListService_List_FullMethodName = "/text.TextListService/List"
)

// TextListServiceClient is the client API for TextListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextListServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TextListResponse, error)
}

type textListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextListServiceClient(cc grpc.ClientConnInterface) TextListServiceClient {
	return &textListServiceClient{cc}
}

func (c *textListServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TextListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextListResponse)
	err := c.cc.Invoke(ctx, TextListService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextListServiceServer is the server API for TextListService service.
// All implementations must embed UnimplementedTextListServiceServer
// for forward compatibility.
type TextListServiceServer interface {
	List(context.Context, *emptypb.Empty) (*TextListResponse, error)
	mustEmbedUnimplementedTextListServiceServer()
}

// UnimplementedTextListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextListServiceServer struct{}

func (UnimplementedTextListServiceServer) List(context.Context, *emptypb.Empty) (*TextListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTextListServiceServer) mustEmbedUnimplementedTextListServiceServer() {}
func (UnimplementedTextListServiceServer) testEmbeddedByValue()                         {}

// UnsafeTextListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextListServiceServer will
// result in compilation errors.
type UnsafeTextListServiceServer interface {
	mustEmbedUnimplementedTextListServiceServer()
}

func RegisterTextListServiceServer(s grpc.ServiceRegistrar, srv TextListServiceServer) {
	// If the following call pancis, it indicates UnimplementedTextListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextListService_ServiceDesc, srv)
}

func _TextListService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextListServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextListService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextListServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TextListService_ServiceDesc is the grpc.ServiceDesc for TextListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text.TextListService",
	HandlerType: (*TextListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TextListService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "text.proto",
}

const (
	TextDeleteService_Delete_FullMethodName = "/text.TextDeleteService/Delete"
)

// TextDeleteServiceClient is the client API for TextDeleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextDeleteServiceClient interface {
	Delete(ctx context.Context, in *TextDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type textDeleteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextDeleteServiceClient(cc grpc.ClientConnInterface) TextDeleteServiceClient {
	return &textDeleteServiceClient{cc}
}

func (c *textDeleteServiceClient) Delete(ctx context.Context, in *TextDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TextDeleteService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextDeleteServiceServer is the server API for TextDeleteService service.
// All implementations must embed UnimplementedTextDeleteServiceServer
// for forward compatibility.
type TextDeleteServiceServer interface {
	Delete(context.Context, *TextDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTextDeleteServiceServer()
}

// UnimplementedTextDeleteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextDeleteServiceServer struct{}

func (UnimplementedTextDeleteServiceServer) Delete(context.Context, *TextDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTextDeleteServiceServer) mustEmbedUnimplementedTextDeleteServiceServer() {}
func (UnimplementedTextDeleteServiceServer) testEmbeddedByValue()                           {}

// UnsafeTextDeleteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextDeleteServiceServer will
// result in compilation errors.
type UnsafeTextDeleteServiceServer interface {
	mustEmbedUnimplementedTextDeleteServiceServer()
}

func RegisterTextDeleteServiceServer(s grpc.ServiceRegistrar, srv TextDeleteServiceServer) {
	// If the following call pancis, it indicates UnimplementedTextDeleteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextDeleteService_ServiceDesc, srv)
}

func _TextDeleteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextDeleteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextDeleteService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextDeleteServiceServer).Delete(ctx, req.(*TextDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextDeleteService_ServiceDesc is the grpc.ServiceDesc for TextDeleteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextDeleteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text.TextDeleteService",
	HandlerType: (*TextDeleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _TextDeleteService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "text.proto",
}
