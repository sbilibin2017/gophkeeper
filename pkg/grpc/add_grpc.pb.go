// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api/protos/add.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AddLoginPasswordService_AddLoginPassword_FullMethodName = "/gophkeeper.grpc.AddLoginPasswordService/AddLoginPassword"
)

// AddLoginPasswordServiceClient is the client API for AddLoginPasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddLoginPasswordServiceClient interface {
	AddLoginPassword(ctx context.Context, in *LoginPassword, opts ...grpc.CallOption) (*AddResponse, error)
}

type addLoginPasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddLoginPasswordServiceClient(cc grpc.ClientConnInterface) AddLoginPasswordServiceClient {
	return &addLoginPasswordServiceClient{cc}
}

func (c *addLoginPasswordServiceClient) AddLoginPassword(ctx context.Context, in *LoginPassword, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, AddLoginPasswordService_AddLoginPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddLoginPasswordServiceServer is the server API for AddLoginPasswordService service.
// All implementations must embed UnimplementedAddLoginPasswordServiceServer
// for forward compatibility.
type AddLoginPasswordServiceServer interface {
	AddLoginPassword(context.Context, *LoginPassword) (*AddResponse, error)
	mustEmbedUnimplementedAddLoginPasswordServiceServer()
}

// UnimplementedAddLoginPasswordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAddLoginPasswordServiceServer struct{}

func (UnimplementedAddLoginPasswordServiceServer) AddLoginPassword(context.Context, *LoginPassword) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLoginPassword not implemented")
}
func (UnimplementedAddLoginPasswordServiceServer) mustEmbedUnimplementedAddLoginPasswordServiceServer() {
}
func (UnimplementedAddLoginPasswordServiceServer) testEmbeddedByValue() {}

// UnsafeAddLoginPasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddLoginPasswordServiceServer will
// result in compilation errors.
type UnsafeAddLoginPasswordServiceServer interface {
	mustEmbedUnimplementedAddLoginPasswordServiceServer()
}

func RegisterAddLoginPasswordServiceServer(s grpc.ServiceRegistrar, srv AddLoginPasswordServiceServer) {
	// If the following call pancis, it indicates UnimplementedAddLoginPasswordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AddLoginPasswordService_ServiceDesc, srv)
}

func _AddLoginPasswordService_AddLoginPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddLoginPasswordServiceServer).AddLoginPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddLoginPasswordService_AddLoginPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddLoginPasswordServiceServer).AddLoginPassword(ctx, req.(*LoginPassword))
	}
	return interceptor(ctx, in, info, handler)
}

// AddLoginPasswordService_ServiceDesc is the grpc.ServiceDesc for AddLoginPasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddLoginPasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.grpc.AddLoginPasswordService",
	HandlerType: (*AddLoginPasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLoginPassword",
			Handler:    _AddLoginPasswordService_AddLoginPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/add.proto",
}

const (
	AddTextService_AddText_FullMethodName = "/gophkeeper.grpc.AddTextService/AddText"
)

// AddTextServiceClient is the client API for AddTextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddTextServiceClient interface {
	AddText(ctx context.Context, in *Text, opts ...grpc.CallOption) (*AddResponse, error)
}

type addTextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddTextServiceClient(cc grpc.ClientConnInterface) AddTextServiceClient {
	return &addTextServiceClient{cc}
}

func (c *addTextServiceClient) AddText(ctx context.Context, in *Text, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, AddTextService_AddText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddTextServiceServer is the server API for AddTextService service.
// All implementations must embed UnimplementedAddTextServiceServer
// for forward compatibility.
type AddTextServiceServer interface {
	AddText(context.Context, *Text) (*AddResponse, error)
	mustEmbedUnimplementedAddTextServiceServer()
}

// UnimplementedAddTextServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAddTextServiceServer struct{}

func (UnimplementedAddTextServiceServer) AddText(context.Context, *Text) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddText not implemented")
}
func (UnimplementedAddTextServiceServer) mustEmbedUnimplementedAddTextServiceServer() {}
func (UnimplementedAddTextServiceServer) testEmbeddedByValue()                        {}

// UnsafeAddTextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddTextServiceServer will
// result in compilation errors.
type UnsafeAddTextServiceServer interface {
	mustEmbedUnimplementedAddTextServiceServer()
}

func RegisterAddTextServiceServer(s grpc.ServiceRegistrar, srv AddTextServiceServer) {
	// If the following call pancis, it indicates UnimplementedAddTextServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AddTextService_ServiceDesc, srv)
}

func _AddTextService_AddText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddTextServiceServer).AddText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddTextService_AddText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddTextServiceServer).AddText(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

// AddTextService_ServiceDesc is the grpc.ServiceDesc for AddTextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddTextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.grpc.AddTextService",
	HandlerType: (*AddTextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddText",
			Handler:    _AddTextService_AddText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/add.proto",
}

const (
	AddBinaryService_AddBinary_FullMethodName = "/gophkeeper.grpc.AddBinaryService/AddBinary"
)

// AddBinaryServiceClient is the client API for AddBinaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddBinaryServiceClient interface {
	AddBinary(ctx context.Context, in *Binary, opts ...grpc.CallOption) (*AddResponse, error)
}

type addBinaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddBinaryServiceClient(cc grpc.ClientConnInterface) AddBinaryServiceClient {
	return &addBinaryServiceClient{cc}
}

func (c *addBinaryServiceClient) AddBinary(ctx context.Context, in *Binary, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, AddBinaryService_AddBinary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddBinaryServiceServer is the server API for AddBinaryService service.
// All implementations must embed UnimplementedAddBinaryServiceServer
// for forward compatibility.
type AddBinaryServiceServer interface {
	AddBinary(context.Context, *Binary) (*AddResponse, error)
	mustEmbedUnimplementedAddBinaryServiceServer()
}

// UnimplementedAddBinaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAddBinaryServiceServer struct{}

func (UnimplementedAddBinaryServiceServer) AddBinary(context.Context, *Binary) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinary not implemented")
}
func (UnimplementedAddBinaryServiceServer) mustEmbedUnimplementedAddBinaryServiceServer() {}
func (UnimplementedAddBinaryServiceServer) testEmbeddedByValue()                          {}

// UnsafeAddBinaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddBinaryServiceServer will
// result in compilation errors.
type UnsafeAddBinaryServiceServer interface {
	mustEmbedUnimplementedAddBinaryServiceServer()
}

func RegisterAddBinaryServiceServer(s grpc.ServiceRegistrar, srv AddBinaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedAddBinaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AddBinaryService_ServiceDesc, srv)
}

func _AddBinaryService_AddBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Binary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddBinaryServiceServer).AddBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddBinaryService_AddBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddBinaryServiceServer).AddBinary(ctx, req.(*Binary))
	}
	return interceptor(ctx, in, info, handler)
}

// AddBinaryService_ServiceDesc is the grpc.ServiceDesc for AddBinaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddBinaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.grpc.AddBinaryService",
	HandlerType: (*AddBinaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBinary",
			Handler:    _AddBinaryService_AddBinary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/add.proto",
}

const (
	AddCardService_AddCard_FullMethodName = "/gophkeeper.grpc.AddCardService/AddCard"
)

// AddCardServiceClient is the client API for AddCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddCardServiceClient interface {
	AddCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*AddResponse, error)
}

type addCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddCardServiceClient(cc grpc.ClientConnInterface) AddCardServiceClient {
	return &addCardServiceClient{cc}
}

func (c *addCardServiceClient) AddCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, AddCardService_AddCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddCardServiceServer is the server API for AddCardService service.
// All implementations must embed UnimplementedAddCardServiceServer
// for forward compatibility.
type AddCardServiceServer interface {
	AddCard(context.Context, *Card) (*AddResponse, error)
	mustEmbedUnimplementedAddCardServiceServer()
}

// UnimplementedAddCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAddCardServiceServer struct{}

func (UnimplementedAddCardServiceServer) AddCard(context.Context, *Card) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedAddCardServiceServer) mustEmbedUnimplementedAddCardServiceServer() {}
func (UnimplementedAddCardServiceServer) testEmbeddedByValue()                        {}

// UnsafeAddCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddCardServiceServer will
// result in compilation errors.
type UnsafeAddCardServiceServer interface {
	mustEmbedUnimplementedAddCardServiceServer()
}

func RegisterAddCardServiceServer(s grpc.ServiceRegistrar, srv AddCardServiceServer) {
	// If the following call pancis, it indicates UnimplementedAddCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AddCardService_ServiceDesc, srv)
}

func _AddCardService_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddCardServiceServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddCardService_AddCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddCardServiceServer).AddCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

// AddCardService_ServiceDesc is the grpc.ServiceDesc for AddCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.grpc.AddCardService",
	HandlerType: (*AddCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCard",
			Handler:    _AddCardService_AddCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/add.proto",
}
