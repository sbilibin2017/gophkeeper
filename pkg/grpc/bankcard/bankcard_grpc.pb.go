// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: bankcard.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BankCardReadService_Get_FullMethodName  = "/bankcard.BankCardReadService/Get"
	BankCardReadService_List_FullMethodName = "/bankcard.BankCardReadService/List"
)

// BankCardReadServiceClient is the client API for BankCardReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankCardReadServiceClient interface {
	Get(ctx context.Context, in *BankCardGetRequest, opts ...grpc.CallOption) (*BankCardDB, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BankCardDB], error)
}

type bankCardReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardReadServiceClient(cc grpc.ClientConnInterface) BankCardReadServiceClient {
	return &bankCardReadServiceClient{cc}
}

func (c *bankCardReadServiceClient) Get(ctx context.Context, in *BankCardGetRequest, opts ...grpc.CallOption) (*BankCardDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankCardDB)
	err := c.cc.Invoke(ctx, BankCardReadService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardReadServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BankCardDB], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BankCardReadService_ServiceDesc.Streams[0], BankCardReadService_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, BankCardDB]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BankCardReadService_ListClient = grpc.ServerStreamingClient[BankCardDB]

// BankCardReadServiceServer is the server API for BankCardReadService service.
// All implementations must embed UnimplementedBankCardReadServiceServer
// for forward compatibility.
type BankCardReadServiceServer interface {
	Get(context.Context, *BankCardGetRequest) (*BankCardDB, error)
	List(*emptypb.Empty, grpc.ServerStreamingServer[BankCardDB]) error
	mustEmbedUnimplementedBankCardReadServiceServer()
}

// UnimplementedBankCardReadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankCardReadServiceServer struct{}

func (UnimplementedBankCardReadServiceServer) Get(context.Context, *BankCardGetRequest) (*BankCardDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBankCardReadServiceServer) List(*emptypb.Empty, grpc.ServerStreamingServer[BankCardDB]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBankCardReadServiceServer) mustEmbedUnimplementedBankCardReadServiceServer() {}
func (UnimplementedBankCardReadServiceServer) testEmbeddedByValue()                             {}

// UnsafeBankCardReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardReadServiceServer will
// result in compilation errors.
type UnsafeBankCardReadServiceServer interface {
	mustEmbedUnimplementedBankCardReadServiceServer()
}

func RegisterBankCardReadServiceServer(s grpc.ServiceRegistrar, srv BankCardReadServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankCardReadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankCardReadService_ServiceDesc, srv)
}

func _BankCardReadService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardReadServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardReadService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardReadServiceServer).Get(ctx, req.(*BankCardGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardReadService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BankCardReadServiceServer).List(m, &grpc.GenericServerStream[emptypb.Empty, BankCardDB]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BankCardReadService_ListServer = grpc.ServerStreamingServer[BankCardDB]

// BankCardReadService_ServiceDesc is the grpc.ServiceDesc for BankCardReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCardReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bankcard.BankCardReadService",
	HandlerType: (*BankCardReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BankCardReadService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _BankCardReadService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bankcard.proto",
}

const (
	BankCardWriteService_Add_FullMethodName    = "/bankcard.BankCardWriteService/Add"
	BankCardWriteService_Delete_FullMethodName = "/bankcard.BankCardWriteService/Delete"
)

// BankCardWriteServiceClient is the client API for BankCardWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankCardWriteServiceClient interface {
	Add(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *BankCardDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bankCardWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardWriteServiceClient(cc grpc.ClientConnInterface) BankCardWriteServiceClient {
	return &bankCardWriteServiceClient{cc}
}

func (c *bankCardWriteServiceClient) Add(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BankCardWriteService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardWriteServiceClient) Delete(ctx context.Context, in *BankCardDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BankCardWriteService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankCardWriteServiceServer is the server API for BankCardWriteService service.
// All implementations must embed UnimplementedBankCardWriteServiceServer
// for forward compatibility.
type BankCardWriteServiceServer interface {
	Add(context.Context, *BankCardAddRequest) (*emptypb.Empty, error)
	Delete(context.Context, *BankCardDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBankCardWriteServiceServer()
}

// UnimplementedBankCardWriteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankCardWriteServiceServer struct{}

func (UnimplementedBankCardWriteServiceServer) Add(context.Context, *BankCardAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBankCardWriteServiceServer) Delete(context.Context, *BankCardDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBankCardWriteServiceServer) mustEmbedUnimplementedBankCardWriteServiceServer() {}
func (UnimplementedBankCardWriteServiceServer) testEmbeddedByValue()                              {}

// UnsafeBankCardWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardWriteServiceServer will
// result in compilation errors.
type UnsafeBankCardWriteServiceServer interface {
	mustEmbedUnimplementedBankCardWriteServiceServer()
}

func RegisterBankCardWriteServiceServer(s grpc.ServiceRegistrar, srv BankCardWriteServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankCardWriteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankCardWriteService_ServiceDesc, srv)
}

func _BankCardWriteService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardWriteServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardWriteService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardWriteServiceServer).Add(ctx, req.(*BankCardAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardWriteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardWriteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardWriteService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardWriteServiceServer).Delete(ctx, req.(*BankCardDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankCardWriteService_ServiceDesc is the grpc.ServiceDesc for BankCardWriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCardWriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bankcard.BankCardWriteService",
	HandlerType: (*BankCardWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BankCardWriteService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BankCardWriteService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bankcard.proto",
}
