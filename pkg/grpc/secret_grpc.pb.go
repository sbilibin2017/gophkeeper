// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: secret.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SaveSecretBankCardService_Save_FullMethodName = "/gophkeeper.SaveSecretBankCardService/Save"
)

// SaveSecretBankCardServiceClient is the client API for SaveSecretBankCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaveSecretBankCardServiceClient interface {
	Save(ctx context.Context, in *AddSecretBankCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type saveSecretBankCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaveSecretBankCardServiceClient(cc grpc.ClientConnInterface) SaveSecretBankCardServiceClient {
	return &saveSecretBankCardServiceClient{cc}
}

func (c *saveSecretBankCardServiceClient) Save(ctx context.Context, in *AddSecretBankCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SaveSecretBankCardService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaveSecretBankCardServiceServer is the server API for SaveSecretBankCardService service.
// All implementations must embed UnimplementedSaveSecretBankCardServiceServer
// for forward compatibility.
type SaveSecretBankCardServiceServer interface {
	Save(context.Context, *AddSecretBankCardRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSaveSecretBankCardServiceServer()
}

// UnimplementedSaveSecretBankCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSaveSecretBankCardServiceServer struct{}

func (UnimplementedSaveSecretBankCardServiceServer) Save(context.Context, *AddSecretBankCardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedSaveSecretBankCardServiceServer) mustEmbedUnimplementedSaveSecretBankCardServiceServer() {
}
func (UnimplementedSaveSecretBankCardServiceServer) testEmbeddedByValue() {}

// UnsafeSaveSecretBankCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaveSecretBankCardServiceServer will
// result in compilation errors.
type UnsafeSaveSecretBankCardServiceServer interface {
	mustEmbedUnimplementedSaveSecretBankCardServiceServer()
}

func RegisterSaveSecretBankCardServiceServer(s grpc.ServiceRegistrar, srv SaveSecretBankCardServiceServer) {
	// If the following call pancis, it indicates UnimplementedSaveSecretBankCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SaveSecretBankCardService_ServiceDesc, srv)
}

func _SaveSecretBankCardService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecretBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaveSecretBankCardServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaveSecretBankCardService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaveSecretBankCardServiceServer).Save(ctx, req.(*AddSecretBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaveSecretBankCardService_ServiceDesc is the grpc.ServiceDesc for SaveSecretBankCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaveSecretBankCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.SaveSecretBankCardService",
	HandlerType: (*SaveSecretBankCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _SaveSecretBankCardService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	GetSecretBankCardService_Get_FullMethodName = "/gophkeeper.GetSecretBankCardService/Get"
)

// GetSecretBankCardServiceClient is the client API for GetSecretBankCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetSecretBankCardServiceClient interface {
	Get(ctx context.Context, in *GetSecretBankCardRequest, opts ...grpc.CallOption) (*GetSecretBankCardResponse, error)
}

type getSecretBankCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetSecretBankCardServiceClient(cc grpc.ClientConnInterface) GetSecretBankCardServiceClient {
	return &getSecretBankCardServiceClient{cc}
}

func (c *getSecretBankCardServiceClient) Get(ctx context.Context, in *GetSecretBankCardRequest, opts ...grpc.CallOption) (*GetSecretBankCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretBankCardResponse)
	err := c.cc.Invoke(ctx, GetSecretBankCardService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetSecretBankCardServiceServer is the server API for GetSecretBankCardService service.
// All implementations must embed UnimplementedGetSecretBankCardServiceServer
// for forward compatibility.
type GetSecretBankCardServiceServer interface {
	Get(context.Context, *GetSecretBankCardRequest) (*GetSecretBankCardResponse, error)
	mustEmbedUnimplementedGetSecretBankCardServiceServer()
}

// UnimplementedGetSecretBankCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetSecretBankCardServiceServer struct{}

func (UnimplementedGetSecretBankCardServiceServer) Get(context.Context, *GetSecretBankCardRequest) (*GetSecretBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetSecretBankCardServiceServer) mustEmbedUnimplementedGetSecretBankCardServiceServer() {
}
func (UnimplementedGetSecretBankCardServiceServer) testEmbeddedByValue() {}

// UnsafeGetSecretBankCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetSecretBankCardServiceServer will
// result in compilation errors.
type UnsafeGetSecretBankCardServiceServer interface {
	mustEmbedUnimplementedGetSecretBankCardServiceServer()
}

func RegisterGetSecretBankCardServiceServer(s grpc.ServiceRegistrar, srv GetSecretBankCardServiceServer) {
	// If the following call pancis, it indicates UnimplementedGetSecretBankCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetSecretBankCardService_ServiceDesc, srv)
}

func _GetSecretBankCardService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSecretBankCardServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetSecretBankCardService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSecretBankCardServiceServer).Get(ctx, req.(*GetSecretBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetSecretBankCardService_ServiceDesc is the grpc.ServiceDesc for GetSecretBankCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetSecretBankCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.GetSecretBankCardService",
	HandlerType: (*GetSecretBankCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetSecretBankCardService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	ListSecretBankCardService_List_FullMethodName = "/gophkeeper.ListSecretBankCardService/List"
)

// ListSecretBankCardServiceClient is the client API for ListSecretBankCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListSecretBankCardServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSecretBankCardResponse, error)
}

type listSecretBankCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListSecretBankCardServiceClient(cc grpc.ClientConnInterface) ListSecretBankCardServiceClient {
	return &listSecretBankCardServiceClient{cc}
}

func (c *listSecretBankCardServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSecretBankCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretBankCardResponse)
	err := c.cc.Invoke(ctx, ListSecretBankCardService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListSecretBankCardServiceServer is the server API for ListSecretBankCardService service.
// All implementations must embed UnimplementedListSecretBankCardServiceServer
// for forward compatibility.
type ListSecretBankCardServiceServer interface {
	List(context.Context, *emptypb.Empty) (*ListSecretBankCardResponse, error)
	mustEmbedUnimplementedListSecretBankCardServiceServer()
}

// UnimplementedListSecretBankCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListSecretBankCardServiceServer struct{}

func (UnimplementedListSecretBankCardServiceServer) List(context.Context, *emptypb.Empty) (*ListSecretBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedListSecretBankCardServiceServer) mustEmbedUnimplementedListSecretBankCardServiceServer() {
}
func (UnimplementedListSecretBankCardServiceServer) testEmbeddedByValue() {}

// UnsafeListSecretBankCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListSecretBankCardServiceServer will
// result in compilation errors.
type UnsafeListSecretBankCardServiceServer interface {
	mustEmbedUnimplementedListSecretBankCardServiceServer()
}

func RegisterListSecretBankCardServiceServer(s grpc.ServiceRegistrar, srv ListSecretBankCardServiceServer) {
	// If the following call pancis, it indicates UnimplementedListSecretBankCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListSecretBankCardService_ServiceDesc, srv)
}

func _ListSecretBankCardService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListSecretBankCardServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListSecretBankCardService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListSecretBankCardServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ListSecretBankCardService_ServiceDesc is the grpc.ServiceDesc for ListSecretBankCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListSecretBankCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.ListSecretBankCardService",
	HandlerType: (*ListSecretBankCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ListSecretBankCardService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	SaveSecretBinaryService_Save_FullMethodName = "/gophkeeper.SaveSecretBinaryService/Save"
)

// SaveSecretBinaryServiceClient is the client API for SaveSecretBinaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaveSecretBinaryServiceClient interface {
	Save(ctx context.Context, in *AddSecretBinaryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type saveSecretBinaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaveSecretBinaryServiceClient(cc grpc.ClientConnInterface) SaveSecretBinaryServiceClient {
	return &saveSecretBinaryServiceClient{cc}
}

func (c *saveSecretBinaryServiceClient) Save(ctx context.Context, in *AddSecretBinaryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SaveSecretBinaryService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaveSecretBinaryServiceServer is the server API for SaveSecretBinaryService service.
// All implementations must embed UnimplementedSaveSecretBinaryServiceServer
// for forward compatibility.
type SaveSecretBinaryServiceServer interface {
	Save(context.Context, *AddSecretBinaryRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSaveSecretBinaryServiceServer()
}

// UnimplementedSaveSecretBinaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSaveSecretBinaryServiceServer struct{}

func (UnimplementedSaveSecretBinaryServiceServer) Save(context.Context, *AddSecretBinaryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedSaveSecretBinaryServiceServer) mustEmbedUnimplementedSaveSecretBinaryServiceServer() {
}
func (UnimplementedSaveSecretBinaryServiceServer) testEmbeddedByValue() {}

// UnsafeSaveSecretBinaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaveSecretBinaryServiceServer will
// result in compilation errors.
type UnsafeSaveSecretBinaryServiceServer interface {
	mustEmbedUnimplementedSaveSecretBinaryServiceServer()
}

func RegisterSaveSecretBinaryServiceServer(s grpc.ServiceRegistrar, srv SaveSecretBinaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedSaveSecretBinaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SaveSecretBinaryService_ServiceDesc, srv)
}

func _SaveSecretBinaryService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecretBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaveSecretBinaryServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaveSecretBinaryService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaveSecretBinaryServiceServer).Save(ctx, req.(*AddSecretBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaveSecretBinaryService_ServiceDesc is the grpc.ServiceDesc for SaveSecretBinaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaveSecretBinaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.SaveSecretBinaryService",
	HandlerType: (*SaveSecretBinaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _SaveSecretBinaryService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	GetSecretBinaryService_Get_FullMethodName = "/gophkeeper.GetSecretBinaryService/Get"
)

// GetSecretBinaryServiceClient is the client API for GetSecretBinaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetSecretBinaryServiceClient interface {
	Get(ctx context.Context, in *GetSecretBinaryRequest, opts ...grpc.CallOption) (*GetSecretBinaryResponse, error)
}

type getSecretBinaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetSecretBinaryServiceClient(cc grpc.ClientConnInterface) GetSecretBinaryServiceClient {
	return &getSecretBinaryServiceClient{cc}
}

func (c *getSecretBinaryServiceClient) Get(ctx context.Context, in *GetSecretBinaryRequest, opts ...grpc.CallOption) (*GetSecretBinaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretBinaryResponse)
	err := c.cc.Invoke(ctx, GetSecretBinaryService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetSecretBinaryServiceServer is the server API for GetSecretBinaryService service.
// All implementations must embed UnimplementedGetSecretBinaryServiceServer
// for forward compatibility.
type GetSecretBinaryServiceServer interface {
	Get(context.Context, *GetSecretBinaryRequest) (*GetSecretBinaryResponse, error)
	mustEmbedUnimplementedGetSecretBinaryServiceServer()
}

// UnimplementedGetSecretBinaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetSecretBinaryServiceServer struct{}

func (UnimplementedGetSecretBinaryServiceServer) Get(context.Context, *GetSecretBinaryRequest) (*GetSecretBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetSecretBinaryServiceServer) mustEmbedUnimplementedGetSecretBinaryServiceServer() {
}
func (UnimplementedGetSecretBinaryServiceServer) testEmbeddedByValue() {}

// UnsafeGetSecretBinaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetSecretBinaryServiceServer will
// result in compilation errors.
type UnsafeGetSecretBinaryServiceServer interface {
	mustEmbedUnimplementedGetSecretBinaryServiceServer()
}

func RegisterGetSecretBinaryServiceServer(s grpc.ServiceRegistrar, srv GetSecretBinaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedGetSecretBinaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetSecretBinaryService_ServiceDesc, srv)
}

func _GetSecretBinaryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSecretBinaryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetSecretBinaryService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSecretBinaryServiceServer).Get(ctx, req.(*GetSecretBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetSecretBinaryService_ServiceDesc is the grpc.ServiceDesc for GetSecretBinaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetSecretBinaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.GetSecretBinaryService",
	HandlerType: (*GetSecretBinaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetSecretBinaryService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	ListSecretBinaryService_List_FullMethodName = "/gophkeeper.ListSecretBinaryService/List"
)

// ListSecretBinaryServiceClient is the client API for ListSecretBinaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListSecretBinaryServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSecretBinaryResponse, error)
}

type listSecretBinaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListSecretBinaryServiceClient(cc grpc.ClientConnInterface) ListSecretBinaryServiceClient {
	return &listSecretBinaryServiceClient{cc}
}

func (c *listSecretBinaryServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSecretBinaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretBinaryResponse)
	err := c.cc.Invoke(ctx, ListSecretBinaryService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListSecretBinaryServiceServer is the server API for ListSecretBinaryService service.
// All implementations must embed UnimplementedListSecretBinaryServiceServer
// for forward compatibility.
type ListSecretBinaryServiceServer interface {
	List(context.Context, *emptypb.Empty) (*ListSecretBinaryResponse, error)
	mustEmbedUnimplementedListSecretBinaryServiceServer()
}

// UnimplementedListSecretBinaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListSecretBinaryServiceServer struct{}

func (UnimplementedListSecretBinaryServiceServer) List(context.Context, *emptypb.Empty) (*ListSecretBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedListSecretBinaryServiceServer) mustEmbedUnimplementedListSecretBinaryServiceServer() {
}
func (UnimplementedListSecretBinaryServiceServer) testEmbeddedByValue() {}

// UnsafeListSecretBinaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListSecretBinaryServiceServer will
// result in compilation errors.
type UnsafeListSecretBinaryServiceServer interface {
	mustEmbedUnimplementedListSecretBinaryServiceServer()
}

func RegisterListSecretBinaryServiceServer(s grpc.ServiceRegistrar, srv ListSecretBinaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedListSecretBinaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListSecretBinaryService_ServiceDesc, srv)
}

func _ListSecretBinaryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListSecretBinaryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListSecretBinaryService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListSecretBinaryServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ListSecretBinaryService_ServiceDesc is the grpc.ServiceDesc for ListSecretBinaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListSecretBinaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.ListSecretBinaryService",
	HandlerType: (*ListSecretBinaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ListSecretBinaryService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	SaveSecretTextService_Save_FullMethodName = "/gophkeeper.SaveSecretTextService/Save"
)

// SaveSecretTextServiceClient is the client API for SaveSecretTextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaveSecretTextServiceClient interface {
	Save(ctx context.Context, in *AddSecretTextRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type saveSecretTextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaveSecretTextServiceClient(cc grpc.ClientConnInterface) SaveSecretTextServiceClient {
	return &saveSecretTextServiceClient{cc}
}

func (c *saveSecretTextServiceClient) Save(ctx context.Context, in *AddSecretTextRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SaveSecretTextService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaveSecretTextServiceServer is the server API for SaveSecretTextService service.
// All implementations must embed UnimplementedSaveSecretTextServiceServer
// for forward compatibility.
type SaveSecretTextServiceServer interface {
	Save(context.Context, *AddSecretTextRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSaveSecretTextServiceServer()
}

// UnimplementedSaveSecretTextServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSaveSecretTextServiceServer struct{}

func (UnimplementedSaveSecretTextServiceServer) Save(context.Context, *AddSecretTextRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedSaveSecretTextServiceServer) mustEmbedUnimplementedSaveSecretTextServiceServer() {}
func (UnimplementedSaveSecretTextServiceServer) testEmbeddedByValue()                               {}

// UnsafeSaveSecretTextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaveSecretTextServiceServer will
// result in compilation errors.
type UnsafeSaveSecretTextServiceServer interface {
	mustEmbedUnimplementedSaveSecretTextServiceServer()
}

func RegisterSaveSecretTextServiceServer(s grpc.ServiceRegistrar, srv SaveSecretTextServiceServer) {
	// If the following call pancis, it indicates UnimplementedSaveSecretTextServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SaveSecretTextService_ServiceDesc, srv)
}

func _SaveSecretTextService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecretTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaveSecretTextServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaveSecretTextService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaveSecretTextServiceServer).Save(ctx, req.(*AddSecretTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaveSecretTextService_ServiceDesc is the grpc.ServiceDesc for SaveSecretTextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaveSecretTextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.SaveSecretTextService",
	HandlerType: (*SaveSecretTextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _SaveSecretTextService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	GetSecretTextService_Get_FullMethodName = "/gophkeeper.GetSecretTextService/Get"
)

// GetSecretTextServiceClient is the client API for GetSecretTextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetSecretTextServiceClient interface {
	Get(ctx context.Context, in *GetSecretTextRequest, opts ...grpc.CallOption) (*GetSecretTextResponse, error)
}

type getSecretTextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetSecretTextServiceClient(cc grpc.ClientConnInterface) GetSecretTextServiceClient {
	return &getSecretTextServiceClient{cc}
}

func (c *getSecretTextServiceClient) Get(ctx context.Context, in *GetSecretTextRequest, opts ...grpc.CallOption) (*GetSecretTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretTextResponse)
	err := c.cc.Invoke(ctx, GetSecretTextService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetSecretTextServiceServer is the server API for GetSecretTextService service.
// All implementations must embed UnimplementedGetSecretTextServiceServer
// for forward compatibility.
type GetSecretTextServiceServer interface {
	Get(context.Context, *GetSecretTextRequest) (*GetSecretTextResponse, error)
	mustEmbedUnimplementedGetSecretTextServiceServer()
}

// UnimplementedGetSecretTextServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetSecretTextServiceServer struct{}

func (UnimplementedGetSecretTextServiceServer) Get(context.Context, *GetSecretTextRequest) (*GetSecretTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetSecretTextServiceServer) mustEmbedUnimplementedGetSecretTextServiceServer() {}
func (UnimplementedGetSecretTextServiceServer) testEmbeddedByValue()                              {}

// UnsafeGetSecretTextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetSecretTextServiceServer will
// result in compilation errors.
type UnsafeGetSecretTextServiceServer interface {
	mustEmbedUnimplementedGetSecretTextServiceServer()
}

func RegisterGetSecretTextServiceServer(s grpc.ServiceRegistrar, srv GetSecretTextServiceServer) {
	// If the following call pancis, it indicates UnimplementedGetSecretTextServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetSecretTextService_ServiceDesc, srv)
}

func _GetSecretTextService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSecretTextServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetSecretTextService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSecretTextServiceServer).Get(ctx, req.(*GetSecretTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetSecretTextService_ServiceDesc is the grpc.ServiceDesc for GetSecretTextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetSecretTextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.GetSecretTextService",
	HandlerType: (*GetSecretTextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetSecretTextService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	ListSecretTextService_List_FullMethodName = "/gophkeeper.ListSecretTextService/List"
)

// ListSecretTextServiceClient is the client API for ListSecretTextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListSecretTextServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSecretTextResponse, error)
}

type listSecretTextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListSecretTextServiceClient(cc grpc.ClientConnInterface) ListSecretTextServiceClient {
	return &listSecretTextServiceClient{cc}
}

func (c *listSecretTextServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSecretTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretTextResponse)
	err := c.cc.Invoke(ctx, ListSecretTextService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListSecretTextServiceServer is the server API for ListSecretTextService service.
// All implementations must embed UnimplementedListSecretTextServiceServer
// for forward compatibility.
type ListSecretTextServiceServer interface {
	List(context.Context, *emptypb.Empty) (*ListSecretTextResponse, error)
	mustEmbedUnimplementedListSecretTextServiceServer()
}

// UnimplementedListSecretTextServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListSecretTextServiceServer struct{}

func (UnimplementedListSecretTextServiceServer) List(context.Context, *emptypb.Empty) (*ListSecretTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedListSecretTextServiceServer) mustEmbedUnimplementedListSecretTextServiceServer() {}
func (UnimplementedListSecretTextServiceServer) testEmbeddedByValue()                               {}

// UnsafeListSecretTextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListSecretTextServiceServer will
// result in compilation errors.
type UnsafeListSecretTextServiceServer interface {
	mustEmbedUnimplementedListSecretTextServiceServer()
}

func RegisterListSecretTextServiceServer(s grpc.ServiceRegistrar, srv ListSecretTextServiceServer) {
	// If the following call pancis, it indicates UnimplementedListSecretTextServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListSecretTextService_ServiceDesc, srv)
}

func _ListSecretTextService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListSecretTextServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListSecretTextService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListSecretTextServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ListSecretTextService_ServiceDesc is the grpc.ServiceDesc for ListSecretTextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListSecretTextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.ListSecretTextService",
	HandlerType: (*ListSecretTextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ListSecretTextService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	SaveSecretUsernamePasswordService_Save_FullMethodName = "/gophkeeper.SaveSecretUsernamePasswordService/Save"
)

// SaveSecretUsernamePasswordServiceClient is the client API for SaveSecretUsernamePasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaveSecretUsernamePasswordServiceClient interface {
	Save(ctx context.Context, in *AddSecretUsernamePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type saveSecretUsernamePasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaveSecretUsernamePasswordServiceClient(cc grpc.ClientConnInterface) SaveSecretUsernamePasswordServiceClient {
	return &saveSecretUsernamePasswordServiceClient{cc}
}

func (c *saveSecretUsernamePasswordServiceClient) Save(ctx context.Context, in *AddSecretUsernamePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SaveSecretUsernamePasswordService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaveSecretUsernamePasswordServiceServer is the server API for SaveSecretUsernamePasswordService service.
// All implementations must embed UnimplementedSaveSecretUsernamePasswordServiceServer
// for forward compatibility.
type SaveSecretUsernamePasswordServiceServer interface {
	Save(context.Context, *AddSecretUsernamePasswordRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSaveSecretUsernamePasswordServiceServer()
}

// UnimplementedSaveSecretUsernamePasswordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSaveSecretUsernamePasswordServiceServer struct{}

func (UnimplementedSaveSecretUsernamePasswordServiceServer) Save(context.Context, *AddSecretUsernamePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedSaveSecretUsernamePasswordServiceServer) mustEmbedUnimplementedSaveSecretUsernamePasswordServiceServer() {
}
func (UnimplementedSaveSecretUsernamePasswordServiceServer) testEmbeddedByValue() {}

// UnsafeSaveSecretUsernamePasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaveSecretUsernamePasswordServiceServer will
// result in compilation errors.
type UnsafeSaveSecretUsernamePasswordServiceServer interface {
	mustEmbedUnimplementedSaveSecretUsernamePasswordServiceServer()
}

func RegisterSaveSecretUsernamePasswordServiceServer(s grpc.ServiceRegistrar, srv SaveSecretUsernamePasswordServiceServer) {
	// If the following call pancis, it indicates UnimplementedSaveSecretUsernamePasswordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SaveSecretUsernamePasswordService_ServiceDesc, srv)
}

func _SaveSecretUsernamePasswordService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecretUsernamePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaveSecretUsernamePasswordServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaveSecretUsernamePasswordService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaveSecretUsernamePasswordServiceServer).Save(ctx, req.(*AddSecretUsernamePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaveSecretUsernamePasswordService_ServiceDesc is the grpc.ServiceDesc for SaveSecretUsernamePasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaveSecretUsernamePasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.SaveSecretUsernamePasswordService",
	HandlerType: (*SaveSecretUsernamePasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _SaveSecretUsernamePasswordService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	GetSecretUsernamePasswordService_Get_FullMethodName = "/gophkeeper.GetSecretUsernamePasswordService/Get"
)

// GetSecretUsernamePasswordServiceClient is the client API for GetSecretUsernamePasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetSecretUsernamePasswordServiceClient interface {
	Get(ctx context.Context, in *GetSecretUsernamePasswordRequest, opts ...grpc.CallOption) (*GetSecretUsernamePasswordResponse, error)
}

type getSecretUsernamePasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetSecretUsernamePasswordServiceClient(cc grpc.ClientConnInterface) GetSecretUsernamePasswordServiceClient {
	return &getSecretUsernamePasswordServiceClient{cc}
}

func (c *getSecretUsernamePasswordServiceClient) Get(ctx context.Context, in *GetSecretUsernamePasswordRequest, opts ...grpc.CallOption) (*GetSecretUsernamePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretUsernamePasswordResponse)
	err := c.cc.Invoke(ctx, GetSecretUsernamePasswordService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetSecretUsernamePasswordServiceServer is the server API for GetSecretUsernamePasswordService service.
// All implementations must embed UnimplementedGetSecretUsernamePasswordServiceServer
// for forward compatibility.
type GetSecretUsernamePasswordServiceServer interface {
	Get(context.Context, *GetSecretUsernamePasswordRequest) (*GetSecretUsernamePasswordResponse, error)
	mustEmbedUnimplementedGetSecretUsernamePasswordServiceServer()
}

// UnimplementedGetSecretUsernamePasswordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetSecretUsernamePasswordServiceServer struct{}

func (UnimplementedGetSecretUsernamePasswordServiceServer) Get(context.Context, *GetSecretUsernamePasswordRequest) (*GetSecretUsernamePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetSecretUsernamePasswordServiceServer) mustEmbedUnimplementedGetSecretUsernamePasswordServiceServer() {
}
func (UnimplementedGetSecretUsernamePasswordServiceServer) testEmbeddedByValue() {}

// UnsafeGetSecretUsernamePasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetSecretUsernamePasswordServiceServer will
// result in compilation errors.
type UnsafeGetSecretUsernamePasswordServiceServer interface {
	mustEmbedUnimplementedGetSecretUsernamePasswordServiceServer()
}

func RegisterGetSecretUsernamePasswordServiceServer(s grpc.ServiceRegistrar, srv GetSecretUsernamePasswordServiceServer) {
	// If the following call pancis, it indicates UnimplementedGetSecretUsernamePasswordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetSecretUsernamePasswordService_ServiceDesc, srv)
}

func _GetSecretUsernamePasswordService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretUsernamePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSecretUsernamePasswordServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetSecretUsernamePasswordService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSecretUsernamePasswordServiceServer).Get(ctx, req.(*GetSecretUsernamePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetSecretUsernamePasswordService_ServiceDesc is the grpc.ServiceDesc for GetSecretUsernamePasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetSecretUsernamePasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.GetSecretUsernamePasswordService",
	HandlerType: (*GetSecretUsernamePasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetSecretUsernamePasswordService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	ListSecretUsernamePasswordService_List_FullMethodName = "/gophkeeper.ListSecretUsernamePasswordService/List"
)

// ListSecretUsernamePasswordServiceClient is the client API for ListSecretUsernamePasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListSecretUsernamePasswordServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSecretUsernamePasswordResponse, error)
}

type listSecretUsernamePasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListSecretUsernamePasswordServiceClient(cc grpc.ClientConnInterface) ListSecretUsernamePasswordServiceClient {
	return &listSecretUsernamePasswordServiceClient{cc}
}

func (c *listSecretUsernamePasswordServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSecretUsernamePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretUsernamePasswordResponse)
	err := c.cc.Invoke(ctx, ListSecretUsernamePasswordService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListSecretUsernamePasswordServiceServer is the server API for ListSecretUsernamePasswordService service.
// All implementations must embed UnimplementedListSecretUsernamePasswordServiceServer
// for forward compatibility.
type ListSecretUsernamePasswordServiceServer interface {
	List(context.Context, *emptypb.Empty) (*ListSecretUsernamePasswordResponse, error)
	mustEmbedUnimplementedListSecretUsernamePasswordServiceServer()
}

// UnimplementedListSecretUsernamePasswordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListSecretUsernamePasswordServiceServer struct{}

func (UnimplementedListSecretUsernamePasswordServiceServer) List(context.Context, *emptypb.Empty) (*ListSecretUsernamePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedListSecretUsernamePasswordServiceServer) mustEmbedUnimplementedListSecretUsernamePasswordServiceServer() {
}
func (UnimplementedListSecretUsernamePasswordServiceServer) testEmbeddedByValue() {}

// UnsafeListSecretUsernamePasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListSecretUsernamePasswordServiceServer will
// result in compilation errors.
type UnsafeListSecretUsernamePasswordServiceServer interface {
	mustEmbedUnimplementedListSecretUsernamePasswordServiceServer()
}

func RegisterListSecretUsernamePasswordServiceServer(s grpc.ServiceRegistrar, srv ListSecretUsernamePasswordServiceServer) {
	// If the following call pancis, it indicates UnimplementedListSecretUsernamePasswordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListSecretUsernamePasswordService_ServiceDesc, srv)
}

func _ListSecretUsernamePasswordService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListSecretUsernamePasswordServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListSecretUsernamePasswordService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListSecretUsernamePasswordServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ListSecretUsernamePasswordService_ServiceDesc is the grpc.ServiceDesc for ListSecretUsernamePasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListSecretUsernamePasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.ListSecretUsernamePasswordService",
	HandlerType: (*ListSecretUsernamePasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ListSecretUsernamePasswordService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}
