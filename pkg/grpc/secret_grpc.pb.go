// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: secret.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretWriteService_Save_FullMethodName = "/secret.SecretWriteService/Save"
)

// SecretWriteServiceClient is the client API for SecretWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SecretWriteService handles saving encrypted secrets.
type SecretWriteServiceClient interface {
	// Saves an encrypted secret.
	Save(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type secretWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretWriteServiceClient(cc grpc.ClientConnInterface) SecretWriteServiceClient {
	return &secretWriteServiceClient{cc}
}

func (c *secretWriteServiceClient) Save(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecretWriteService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretWriteServiceServer is the server API for SecretWriteService service.
// All implementations must embed UnimplementedSecretWriteServiceServer
// for forward compatibility.
//
// SecretWriteService handles saving encrypted secrets.
type SecretWriteServiceServer interface {
	// Saves an encrypted secret.
	Save(context.Context, *Secret) (*emptypb.Empty, error)
	mustEmbedUnimplementedSecretWriteServiceServer()
}

// UnimplementedSecretWriteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretWriteServiceServer struct{}

func (UnimplementedSecretWriteServiceServer) Save(context.Context, *Secret) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedSecretWriteServiceServer) mustEmbedUnimplementedSecretWriteServiceServer() {}
func (UnimplementedSecretWriteServiceServer) testEmbeddedByValue()                            {}

// UnsafeSecretWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretWriteServiceServer will
// result in compilation errors.
type UnsafeSecretWriteServiceServer interface {
	mustEmbedUnimplementedSecretWriteServiceServer()
}

func RegisterSecretWriteServiceServer(s grpc.ServiceRegistrar, srv SecretWriteServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretWriteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretWriteService_ServiceDesc, srv)
}

func _SecretWriteService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretWriteServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretWriteService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretWriteServiceServer).Save(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretWriteService_ServiceDesc is the grpc.ServiceDesc for SecretWriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretWriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secret.SecretWriteService",
	HandlerType: (*SecretWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _SecretWriteService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret.proto",
}

const (
	SecretReadService_Get_FullMethodName  = "/secret.SecretReadService/Get"
	SecretReadService_List_FullMethodName = "/secret.SecretReadService/List"
)

// SecretReadServiceClient is the client API for SecretReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SecretReadService handles reading encrypted secrets.
type SecretReadServiceClient interface {
	// Retrieves a specific secret by name and type.
	Get(ctx context.Context, in *SecretGetRequest, opts ...grpc.CallOption) (*Secret, error)
	// Lists all secrets for the authenticated user.
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Secret], error)
}

type secretReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretReadServiceClient(cc grpc.ClientConnInterface) SecretReadServiceClient {
	return &secretReadServiceClient{cc}
}

func (c *secretReadServiceClient) Get(ctx context.Context, in *SecretGetRequest, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, SecretReadService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretReadServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Secret], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretReadService_ServiceDesc.Streams[0], SecretReadService_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Secret]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretReadService_ListClient = grpc.ServerStreamingClient[Secret]

// SecretReadServiceServer is the server API for SecretReadService service.
// All implementations must embed UnimplementedSecretReadServiceServer
// for forward compatibility.
//
// SecretReadService handles reading encrypted secrets.
type SecretReadServiceServer interface {
	// Retrieves a specific secret by name and type.
	Get(context.Context, *SecretGetRequest) (*Secret, error)
	// Lists all secrets for the authenticated user.
	List(*emptypb.Empty, grpc.ServerStreamingServer[Secret]) error
	mustEmbedUnimplementedSecretReadServiceServer()
}

// UnimplementedSecretReadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretReadServiceServer struct{}

func (UnimplementedSecretReadServiceServer) Get(context.Context, *SecretGetRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSecretReadServiceServer) List(*emptypb.Empty, grpc.ServerStreamingServer[Secret]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSecretReadServiceServer) mustEmbedUnimplementedSecretReadServiceServer() {}
func (UnimplementedSecretReadServiceServer) testEmbeddedByValue()                           {}

// UnsafeSecretReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretReadServiceServer will
// result in compilation errors.
type UnsafeSecretReadServiceServer interface {
	mustEmbedUnimplementedSecretReadServiceServer()
}

func RegisterSecretReadServiceServer(s grpc.ServiceRegistrar, srv SecretReadServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretReadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretReadService_ServiceDesc, srv)
}

func _SecretReadService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretReadServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretReadService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretReadServiceServer).Get(ctx, req.(*SecretGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretReadService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecretReadServiceServer).List(m, &grpc.GenericServerStream[emptypb.Empty, Secret]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretReadService_ListServer = grpc.ServerStreamingServer[Secret]

// SecretReadService_ServiceDesc is the grpc.ServiceDesc for SecretReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secret.SecretReadService",
	HandlerType: (*SecretReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SecretReadService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _SecretReadService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "secret.proto",
}
