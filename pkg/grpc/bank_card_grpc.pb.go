// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: bank_card.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BankCardAddService_Add_FullMethodName = "/bank_card.BankCardAddService/Add"
)

// BankCardAddServiceClient is the client API for BankCardAddService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankCardAddServiceClient interface {
	Add(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bankCardAddServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardAddServiceClient(cc grpc.ClientConnInterface) BankCardAddServiceClient {
	return &bankCardAddServiceClient{cc}
}

func (c *bankCardAddServiceClient) Add(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BankCardAddService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankCardAddServiceServer is the server API for BankCardAddService service.
// All implementations must embed UnimplementedBankCardAddServiceServer
// for forward compatibility.
type BankCardAddServiceServer interface {
	Add(context.Context, *BankCardAddRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBankCardAddServiceServer()
}

// UnimplementedBankCardAddServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankCardAddServiceServer struct{}

func (UnimplementedBankCardAddServiceServer) Add(context.Context, *BankCardAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBankCardAddServiceServer) mustEmbedUnimplementedBankCardAddServiceServer() {}
func (UnimplementedBankCardAddServiceServer) testEmbeddedByValue()                            {}

// UnsafeBankCardAddServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardAddServiceServer will
// result in compilation errors.
type UnsafeBankCardAddServiceServer interface {
	mustEmbedUnimplementedBankCardAddServiceServer()
}

func RegisterBankCardAddServiceServer(s grpc.ServiceRegistrar, srv BankCardAddServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankCardAddServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankCardAddService_ServiceDesc, srv)
}

func _BankCardAddService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardAddServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardAddService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardAddServiceServer).Add(ctx, req.(*BankCardAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankCardAddService_ServiceDesc is the grpc.ServiceDesc for BankCardAddService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCardAddService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank_card.BankCardAddService",
	HandlerType: (*BankCardAddServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BankCardAddService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank_card.proto",
}

const (
	BankCardGetService_Get_FullMethodName = "/bank_card.BankCardGetService/Get"
)

// BankCardGetServiceClient is the client API for BankCardGetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankCardGetServiceClient interface {
	Get(ctx context.Context, in *BankCardGetRequest, opts ...grpc.CallOption) (*BankCardGetResponse, error)
}

type bankCardGetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardGetServiceClient(cc grpc.ClientConnInterface) BankCardGetServiceClient {
	return &bankCardGetServiceClient{cc}
}

func (c *bankCardGetServiceClient) Get(ctx context.Context, in *BankCardGetRequest, opts ...grpc.CallOption) (*BankCardGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankCardGetResponse)
	err := c.cc.Invoke(ctx, BankCardGetService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankCardGetServiceServer is the server API for BankCardGetService service.
// All implementations must embed UnimplementedBankCardGetServiceServer
// for forward compatibility.
type BankCardGetServiceServer interface {
	Get(context.Context, *BankCardGetRequest) (*BankCardGetResponse, error)
	mustEmbedUnimplementedBankCardGetServiceServer()
}

// UnimplementedBankCardGetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankCardGetServiceServer struct{}

func (UnimplementedBankCardGetServiceServer) Get(context.Context, *BankCardGetRequest) (*BankCardGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBankCardGetServiceServer) mustEmbedUnimplementedBankCardGetServiceServer() {}
func (UnimplementedBankCardGetServiceServer) testEmbeddedByValue()                            {}

// UnsafeBankCardGetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardGetServiceServer will
// result in compilation errors.
type UnsafeBankCardGetServiceServer interface {
	mustEmbedUnimplementedBankCardGetServiceServer()
}

func RegisterBankCardGetServiceServer(s grpc.ServiceRegistrar, srv BankCardGetServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankCardGetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankCardGetService_ServiceDesc, srv)
}

func _BankCardGetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardGetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardGetService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardGetServiceServer).Get(ctx, req.(*BankCardGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankCardGetService_ServiceDesc is the grpc.ServiceDesc for BankCardGetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCardGetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank_card.BankCardGetService",
	HandlerType: (*BankCardGetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BankCardGetService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank_card.proto",
}

const (
	BankCardListService_List_FullMethodName = "/bank_card.BankCardListService/List"
)

// BankCardListServiceClient is the client API for BankCardListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankCardListServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BankCardListResponse, error)
}

type bankCardListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardListServiceClient(cc grpc.ClientConnInterface) BankCardListServiceClient {
	return &bankCardListServiceClient{cc}
}

func (c *bankCardListServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BankCardListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankCardListResponse)
	err := c.cc.Invoke(ctx, BankCardListService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankCardListServiceServer is the server API for BankCardListService service.
// All implementations must embed UnimplementedBankCardListServiceServer
// for forward compatibility.
type BankCardListServiceServer interface {
	List(context.Context, *emptypb.Empty) (*BankCardListResponse, error)
	mustEmbedUnimplementedBankCardListServiceServer()
}

// UnimplementedBankCardListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankCardListServiceServer struct{}

func (UnimplementedBankCardListServiceServer) List(context.Context, *emptypb.Empty) (*BankCardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBankCardListServiceServer) mustEmbedUnimplementedBankCardListServiceServer() {}
func (UnimplementedBankCardListServiceServer) testEmbeddedByValue()                             {}

// UnsafeBankCardListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardListServiceServer will
// result in compilation errors.
type UnsafeBankCardListServiceServer interface {
	mustEmbedUnimplementedBankCardListServiceServer()
}

func RegisterBankCardListServiceServer(s grpc.ServiceRegistrar, srv BankCardListServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankCardListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankCardListService_ServiceDesc, srv)
}

func _BankCardListService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardListServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardListService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardListServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BankCardListService_ServiceDesc is the grpc.ServiceDesc for BankCardListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCardListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank_card.BankCardListService",
	HandlerType: (*BankCardListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _BankCardListService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank_card.proto",
}

const (
	BankCardDeleteService_Delete_FullMethodName = "/bank_card.BankCardDeleteService/Delete"
)

// BankCardDeleteServiceClient is the client API for BankCardDeleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankCardDeleteServiceClient interface {
	Delete(ctx context.Context, in *BankCardDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bankCardDeleteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardDeleteServiceClient(cc grpc.ClientConnInterface) BankCardDeleteServiceClient {
	return &bankCardDeleteServiceClient{cc}
}

func (c *bankCardDeleteServiceClient) Delete(ctx context.Context, in *BankCardDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BankCardDeleteService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankCardDeleteServiceServer is the server API for BankCardDeleteService service.
// All implementations must embed UnimplementedBankCardDeleteServiceServer
// for forward compatibility.
type BankCardDeleteServiceServer interface {
	Delete(context.Context, *BankCardDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBankCardDeleteServiceServer()
}

// UnimplementedBankCardDeleteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankCardDeleteServiceServer struct{}

func (UnimplementedBankCardDeleteServiceServer) Delete(context.Context, *BankCardDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBankCardDeleteServiceServer) mustEmbedUnimplementedBankCardDeleteServiceServer() {}
func (UnimplementedBankCardDeleteServiceServer) testEmbeddedByValue()                               {}

// UnsafeBankCardDeleteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardDeleteServiceServer will
// result in compilation errors.
type UnsafeBankCardDeleteServiceServer interface {
	mustEmbedUnimplementedBankCardDeleteServiceServer()
}

func RegisterBankCardDeleteServiceServer(s grpc.ServiceRegistrar, srv BankCardDeleteServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankCardDeleteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankCardDeleteService_ServiceDesc, srv)
}

func _BankCardDeleteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardDeleteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardDeleteService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardDeleteServiceServer).Delete(ctx, req.(*BankCardDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankCardDeleteService_ServiceDesc is the grpc.ServiceDesc for BankCardDeleteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCardDeleteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank_card.BankCardDeleteService",
	HandlerType: (*BankCardDeleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _BankCardDeleteService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank_card.proto",
}
