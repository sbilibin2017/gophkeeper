// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: binary.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BinaryAddService_Add_FullMethodName = "/binary.BinaryAddService/Add"
)

// BinaryAddServiceClient is the client API for BinaryAddService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryAddServiceClient interface {
	Add(ctx context.Context, in *BinaryAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type binaryAddServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryAddServiceClient(cc grpc.ClientConnInterface) BinaryAddServiceClient {
	return &binaryAddServiceClient{cc}
}

func (c *binaryAddServiceClient) Add(ctx context.Context, in *BinaryAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BinaryAddService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryAddServiceServer is the server API for BinaryAddService service.
// All implementations must embed UnimplementedBinaryAddServiceServer
// for forward compatibility.
type BinaryAddServiceServer interface {
	Add(context.Context, *BinaryAddRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBinaryAddServiceServer()
}

// UnimplementedBinaryAddServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBinaryAddServiceServer struct{}

func (UnimplementedBinaryAddServiceServer) Add(context.Context, *BinaryAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBinaryAddServiceServer) mustEmbedUnimplementedBinaryAddServiceServer() {}
func (UnimplementedBinaryAddServiceServer) testEmbeddedByValue()                          {}

// UnsafeBinaryAddServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryAddServiceServer will
// result in compilation errors.
type UnsafeBinaryAddServiceServer interface {
	mustEmbedUnimplementedBinaryAddServiceServer()
}

func RegisterBinaryAddServiceServer(s grpc.ServiceRegistrar, srv BinaryAddServiceServer) {
	// If the following call pancis, it indicates UnimplementedBinaryAddServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BinaryAddService_ServiceDesc, srv)
}

func _BinaryAddService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryAddServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryAddService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryAddServiceServer).Add(ctx, req.(*BinaryAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryAddService_ServiceDesc is the grpc.ServiceDesc for BinaryAddService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryAddService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binary.BinaryAddService",
	HandlerType: (*BinaryAddServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BinaryAddService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binary.proto",
}

const (
	BinaryGetService_Get_FullMethodName = "/binary.BinaryGetService/Get"
)

// BinaryGetServiceClient is the client API for BinaryGetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryGetServiceClient interface {
	Get(ctx context.Context, in *BinaryGetRequest, opts ...grpc.CallOption) (*BinaryGetResponse, error)
}

type binaryGetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryGetServiceClient(cc grpc.ClientConnInterface) BinaryGetServiceClient {
	return &binaryGetServiceClient{cc}
}

func (c *binaryGetServiceClient) Get(ctx context.Context, in *BinaryGetRequest, opts ...grpc.CallOption) (*BinaryGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinaryGetResponse)
	err := c.cc.Invoke(ctx, BinaryGetService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryGetServiceServer is the server API for BinaryGetService service.
// All implementations must embed UnimplementedBinaryGetServiceServer
// for forward compatibility.
type BinaryGetServiceServer interface {
	Get(context.Context, *BinaryGetRequest) (*BinaryGetResponse, error)
	mustEmbedUnimplementedBinaryGetServiceServer()
}

// UnimplementedBinaryGetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBinaryGetServiceServer struct{}

func (UnimplementedBinaryGetServiceServer) Get(context.Context, *BinaryGetRequest) (*BinaryGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBinaryGetServiceServer) mustEmbedUnimplementedBinaryGetServiceServer() {}
func (UnimplementedBinaryGetServiceServer) testEmbeddedByValue()                          {}

// UnsafeBinaryGetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryGetServiceServer will
// result in compilation errors.
type UnsafeBinaryGetServiceServer interface {
	mustEmbedUnimplementedBinaryGetServiceServer()
}

func RegisterBinaryGetServiceServer(s grpc.ServiceRegistrar, srv BinaryGetServiceServer) {
	// If the following call pancis, it indicates UnimplementedBinaryGetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BinaryGetService_ServiceDesc, srv)
}

func _BinaryGetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryGetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryGetService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryGetServiceServer).Get(ctx, req.(*BinaryGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryGetService_ServiceDesc is the grpc.ServiceDesc for BinaryGetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryGetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binary.BinaryGetService",
	HandlerType: (*BinaryGetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BinaryGetService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binary.proto",
}

const (
	BinaryListService_List_FullMethodName = "/binary.BinaryListService/List"
)

// BinaryListServiceClient is the client API for BinaryListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryListServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BinaryListResponse, error)
}

type binaryListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryListServiceClient(cc grpc.ClientConnInterface) BinaryListServiceClient {
	return &binaryListServiceClient{cc}
}

func (c *binaryListServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BinaryListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinaryListResponse)
	err := c.cc.Invoke(ctx, BinaryListService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryListServiceServer is the server API for BinaryListService service.
// All implementations must embed UnimplementedBinaryListServiceServer
// for forward compatibility.
type BinaryListServiceServer interface {
	List(context.Context, *emptypb.Empty) (*BinaryListResponse, error)
	mustEmbedUnimplementedBinaryListServiceServer()
}

// UnimplementedBinaryListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBinaryListServiceServer struct{}

func (UnimplementedBinaryListServiceServer) List(context.Context, *emptypb.Empty) (*BinaryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBinaryListServiceServer) mustEmbedUnimplementedBinaryListServiceServer() {}
func (UnimplementedBinaryListServiceServer) testEmbeddedByValue()                           {}

// UnsafeBinaryListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryListServiceServer will
// result in compilation errors.
type UnsafeBinaryListServiceServer interface {
	mustEmbedUnimplementedBinaryListServiceServer()
}

func RegisterBinaryListServiceServer(s grpc.ServiceRegistrar, srv BinaryListServiceServer) {
	// If the following call pancis, it indicates UnimplementedBinaryListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BinaryListService_ServiceDesc, srv)
}

func _BinaryListService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryListServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryListService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryListServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryListService_ServiceDesc is the grpc.ServiceDesc for BinaryListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binary.BinaryListService",
	HandlerType: (*BinaryListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _BinaryListService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binary.proto",
}
