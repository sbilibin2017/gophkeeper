// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: bankcard.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BankCardService_Add_FullMethodName  = "/bankcard.BankCardService/Add"
	BankCardService_Get_FullMethodName  = "/bankcard.BankCardService/Get"
	BankCardService_List_FullMethodName = "/bankcard.BankCardService/List"
)

// BankCardServiceClient is the client API for BankCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankCardServiceClient interface {
	Add(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *BankCardFilterRequest, opts ...grpc.CallOption) (*BankCard, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BankCard], error)
}

type bankCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardServiceClient(cc grpc.ClientConnInterface) BankCardServiceClient {
	return &bankCardServiceClient{cc}
}

func (c *bankCardServiceClient) Add(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BankCardService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) Get(ctx context.Context, in *BankCardFilterRequest, opts ...grpc.CallOption) (*BankCard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankCard)
	err := c.cc.Invoke(ctx, BankCardService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BankCard], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BankCardService_ServiceDesc.Streams[0], BankCardService_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, BankCard]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BankCardService_ListClient = grpc.ServerStreamingClient[BankCard]

// BankCardServiceServer is the server API for BankCardService service.
// All implementations must embed UnimplementedBankCardServiceServer
// for forward compatibility.
type BankCardServiceServer interface {
	Add(context.Context, *BankCardAddRequest) (*emptypb.Empty, error)
	Get(context.Context, *BankCardFilterRequest) (*BankCard, error)
	List(*emptypb.Empty, grpc.ServerStreamingServer[BankCard]) error
	mustEmbedUnimplementedBankCardServiceServer()
}

// UnimplementedBankCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankCardServiceServer struct{}

func (UnimplementedBankCardServiceServer) Add(context.Context, *BankCardAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBankCardServiceServer) Get(context.Context, *BankCardFilterRequest) (*BankCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBankCardServiceServer) List(*emptypb.Empty, grpc.ServerStreamingServer[BankCard]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBankCardServiceServer) mustEmbedUnimplementedBankCardServiceServer() {}
func (UnimplementedBankCardServiceServer) testEmbeddedByValue()                         {}

// UnsafeBankCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardServiceServer will
// result in compilation errors.
type UnsafeBankCardServiceServer interface {
	mustEmbedUnimplementedBankCardServiceServer()
}

func RegisterBankCardServiceServer(s grpc.ServiceRegistrar, srv BankCardServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankCardService_ServiceDesc, srv)
}

func _BankCardService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).Add(ctx, req.(*BankCardAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankCardService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).Get(ctx, req.(*BankCardFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BankCardServiceServer).List(m, &grpc.GenericServerStream[emptypb.Empty, BankCard]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BankCardService_ListServer = grpc.ServerStreamingServer[BankCard]

// BankCardService_ServiceDesc is the grpc.ServiceDesc for BankCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bankcard.BankCardService",
	HandlerType: (*BankCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BankCardService_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BankCardService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _BankCardService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bankcard.proto",
}
