// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: secret_username_password.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretUsernamePasswordService_List_FullMethodName = "/gophkeeper.SecretUsernamePasswordService/List"
	SecretUsernamePasswordService_Get_FullMethodName  = "/gophkeeper.SecretUsernamePasswordService/Get"
	SecretUsernamePasswordService_Save_FullMethodName = "/gophkeeper.SecretUsernamePasswordService/Save"
)

// SecretUsernamePasswordServiceClient is the client API for SecretUsernamePasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC-сервис для работы с секретами логина и паролем
type SecretUsernamePasswordServiceClient interface {
	List(ctx context.Context, in *SecretUsernamePasswordListRequest, opts ...grpc.CallOption) (*SecretUsernamePasswordListResponse, error)
	Get(ctx context.Context, in *SecretUsernamePasswordGetRequest, opts ...grpc.CallOption) (*SecretUsernamePasswordGetResponse, error)
	Save(ctx context.Context, in *SecretUsernamePasswordSaveRequest, opts ...grpc.CallOption) (*SecretUsernamePasswordSaveResponse, error)
}

type secretUsernamePasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretUsernamePasswordServiceClient(cc grpc.ClientConnInterface) SecretUsernamePasswordServiceClient {
	return &secretUsernamePasswordServiceClient{cc}
}

func (c *secretUsernamePasswordServiceClient) List(ctx context.Context, in *SecretUsernamePasswordListRequest, opts ...grpc.CallOption) (*SecretUsernamePasswordListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretUsernamePasswordListResponse)
	err := c.cc.Invoke(ctx, SecretUsernamePasswordService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretUsernamePasswordServiceClient) Get(ctx context.Context, in *SecretUsernamePasswordGetRequest, opts ...grpc.CallOption) (*SecretUsernamePasswordGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretUsernamePasswordGetResponse)
	err := c.cc.Invoke(ctx, SecretUsernamePasswordService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretUsernamePasswordServiceClient) Save(ctx context.Context, in *SecretUsernamePasswordSaveRequest, opts ...grpc.CallOption) (*SecretUsernamePasswordSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretUsernamePasswordSaveResponse)
	err := c.cc.Invoke(ctx, SecretUsernamePasswordService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretUsernamePasswordServiceServer is the server API for SecretUsernamePasswordService service.
// All implementations must embed UnimplementedSecretUsernamePasswordServiceServer
// for forward compatibility.
//
// gRPC-сервис для работы с секретами логина и паролем
type SecretUsernamePasswordServiceServer interface {
	List(context.Context, *SecretUsernamePasswordListRequest) (*SecretUsernamePasswordListResponse, error)
	Get(context.Context, *SecretUsernamePasswordGetRequest) (*SecretUsernamePasswordGetResponse, error)
	Save(context.Context, *SecretUsernamePasswordSaveRequest) (*SecretUsernamePasswordSaveResponse, error)
	mustEmbedUnimplementedSecretUsernamePasswordServiceServer()
}

// UnimplementedSecretUsernamePasswordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretUsernamePasswordServiceServer struct{}

func (UnimplementedSecretUsernamePasswordServiceServer) List(context.Context, *SecretUsernamePasswordListRequest) (*SecretUsernamePasswordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSecretUsernamePasswordServiceServer) Get(context.Context, *SecretUsernamePasswordGetRequest) (*SecretUsernamePasswordGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSecretUsernamePasswordServiceServer) Save(context.Context, *SecretUsernamePasswordSaveRequest) (*SecretUsernamePasswordSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedSecretUsernamePasswordServiceServer) mustEmbedUnimplementedSecretUsernamePasswordServiceServer() {
}
func (UnimplementedSecretUsernamePasswordServiceServer) testEmbeddedByValue() {}

// UnsafeSecretUsernamePasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretUsernamePasswordServiceServer will
// result in compilation errors.
type UnsafeSecretUsernamePasswordServiceServer interface {
	mustEmbedUnimplementedSecretUsernamePasswordServiceServer()
}

func RegisterSecretUsernamePasswordServiceServer(s grpc.ServiceRegistrar, srv SecretUsernamePasswordServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretUsernamePasswordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretUsernamePasswordService_ServiceDesc, srv)
}

func _SecretUsernamePasswordService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretUsernamePasswordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretUsernamePasswordServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretUsernamePasswordService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretUsernamePasswordServiceServer).List(ctx, req.(*SecretUsernamePasswordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretUsernamePasswordService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretUsernamePasswordGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretUsernamePasswordServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretUsernamePasswordService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretUsernamePasswordServiceServer).Get(ctx, req.(*SecretUsernamePasswordGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretUsernamePasswordService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretUsernamePasswordSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretUsernamePasswordServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretUsernamePasswordService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretUsernamePasswordServiceServer).Save(ctx, req.(*SecretUsernamePasswordSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretUsernamePasswordService_ServiceDesc is the grpc.ServiceDesc for SecretUsernamePasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretUsernamePasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.SecretUsernamePasswordService",
	HandlerType: (*SecretUsernamePasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SecretUsernamePasswordService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SecretUsernamePasswordService_Get_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _SecretUsernamePasswordService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret_username_password.proto",
}
