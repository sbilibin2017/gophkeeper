// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api/protos/get.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GetLoginPasswordService_Get_FullMethodName = "/gophkeeper.grpc.GetLoginPasswordService/Get"
)

// GetLoginPasswordServiceClient is the client API for GetLoginPasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetLoginPasswordServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetLoginPasswordResponse, error)
}

type getLoginPasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetLoginPasswordServiceClient(cc grpc.ClientConnInterface) GetLoginPasswordServiceClient {
	return &getLoginPasswordServiceClient{cc}
}

func (c *getLoginPasswordServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetLoginPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoginPasswordResponse)
	err := c.cc.Invoke(ctx, GetLoginPasswordService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetLoginPasswordServiceServer is the server API for GetLoginPasswordService service.
// All implementations must embed UnimplementedGetLoginPasswordServiceServer
// for forward compatibility.
type GetLoginPasswordServiceServer interface {
	Get(context.Context, *GetRequest) (*GetLoginPasswordResponse, error)
	mustEmbedUnimplementedGetLoginPasswordServiceServer()
}

// UnimplementedGetLoginPasswordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetLoginPasswordServiceServer struct{}

func (UnimplementedGetLoginPasswordServiceServer) Get(context.Context, *GetRequest) (*GetLoginPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetLoginPasswordServiceServer) mustEmbedUnimplementedGetLoginPasswordServiceServer() {
}
func (UnimplementedGetLoginPasswordServiceServer) testEmbeddedByValue() {}

// UnsafeGetLoginPasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetLoginPasswordServiceServer will
// result in compilation errors.
type UnsafeGetLoginPasswordServiceServer interface {
	mustEmbedUnimplementedGetLoginPasswordServiceServer()
}

func RegisterGetLoginPasswordServiceServer(s grpc.ServiceRegistrar, srv GetLoginPasswordServiceServer) {
	// If the following call pancis, it indicates UnimplementedGetLoginPasswordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetLoginPasswordService_ServiceDesc, srv)
}

func _GetLoginPasswordService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetLoginPasswordServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetLoginPasswordService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetLoginPasswordServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetLoginPasswordService_ServiceDesc is the grpc.ServiceDesc for GetLoginPasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetLoginPasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.grpc.GetLoginPasswordService",
	HandlerType: (*GetLoginPasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetLoginPasswordService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/get.proto",
}

const (
	GetTextService_Get_FullMethodName = "/gophkeeper.grpc.GetTextService/Get"
)

// GetTextServiceClient is the client API for GetTextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetTextServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTextResponse, error)
}

type getTextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetTextServiceClient(cc grpc.ClientConnInterface) GetTextServiceClient {
	return &getTextServiceClient{cc}
}

func (c *getTextServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTextResponse)
	err := c.cc.Invoke(ctx, GetTextService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetTextServiceServer is the server API for GetTextService service.
// All implementations must embed UnimplementedGetTextServiceServer
// for forward compatibility.
type GetTextServiceServer interface {
	Get(context.Context, *GetRequest) (*GetTextResponse, error)
	mustEmbedUnimplementedGetTextServiceServer()
}

// UnimplementedGetTextServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetTextServiceServer struct{}

func (UnimplementedGetTextServiceServer) Get(context.Context, *GetRequest) (*GetTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetTextServiceServer) mustEmbedUnimplementedGetTextServiceServer() {}
func (UnimplementedGetTextServiceServer) testEmbeddedByValue()                        {}

// UnsafeGetTextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetTextServiceServer will
// result in compilation errors.
type UnsafeGetTextServiceServer interface {
	mustEmbedUnimplementedGetTextServiceServer()
}

func RegisterGetTextServiceServer(s grpc.ServiceRegistrar, srv GetTextServiceServer) {
	// If the following call pancis, it indicates UnimplementedGetTextServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetTextService_ServiceDesc, srv)
}

func _GetTextService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTextServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetTextService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTextServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetTextService_ServiceDesc is the grpc.ServiceDesc for GetTextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetTextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.grpc.GetTextService",
	HandlerType: (*GetTextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetTextService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/get.proto",
}

const (
	GetBinaryService_Get_FullMethodName = "/gophkeeper.grpc.GetBinaryService/Get"
)

// GetBinaryServiceClient is the client API for GetBinaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetBinaryServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetBinaryResponse, error)
}

type getBinaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetBinaryServiceClient(cc grpc.ClientConnInterface) GetBinaryServiceClient {
	return &getBinaryServiceClient{cc}
}

func (c *getBinaryServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetBinaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBinaryResponse)
	err := c.cc.Invoke(ctx, GetBinaryService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetBinaryServiceServer is the server API for GetBinaryService service.
// All implementations must embed UnimplementedGetBinaryServiceServer
// for forward compatibility.
type GetBinaryServiceServer interface {
	Get(context.Context, *GetRequest) (*GetBinaryResponse, error)
	mustEmbedUnimplementedGetBinaryServiceServer()
}

// UnimplementedGetBinaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetBinaryServiceServer struct{}

func (UnimplementedGetBinaryServiceServer) Get(context.Context, *GetRequest) (*GetBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetBinaryServiceServer) mustEmbedUnimplementedGetBinaryServiceServer() {}
func (UnimplementedGetBinaryServiceServer) testEmbeddedByValue()                          {}

// UnsafeGetBinaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetBinaryServiceServer will
// result in compilation errors.
type UnsafeGetBinaryServiceServer interface {
	mustEmbedUnimplementedGetBinaryServiceServer()
}

func RegisterGetBinaryServiceServer(s grpc.ServiceRegistrar, srv GetBinaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedGetBinaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetBinaryService_ServiceDesc, srv)
}

func _GetBinaryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetBinaryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetBinaryService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetBinaryServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetBinaryService_ServiceDesc is the grpc.ServiceDesc for GetBinaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetBinaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.grpc.GetBinaryService",
	HandlerType: (*GetBinaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetBinaryService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/get.proto",
}

const (
	GetCardService_Get_FullMethodName = "/gophkeeper.grpc.GetCardService/Get"
)

// GetCardServiceClient is the client API for GetCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetCardServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCardResponse, error)
}

type getCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetCardServiceClient(cc grpc.ClientConnInterface) GetCardServiceClient {
	return &getCardServiceClient{cc}
}

func (c *getCardServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardResponse)
	err := c.cc.Invoke(ctx, GetCardService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetCardServiceServer is the server API for GetCardService service.
// All implementations must embed UnimplementedGetCardServiceServer
// for forward compatibility.
type GetCardServiceServer interface {
	Get(context.Context, *GetRequest) (*GetCardResponse, error)
	mustEmbedUnimplementedGetCardServiceServer()
}

// UnimplementedGetCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetCardServiceServer struct{}

func (UnimplementedGetCardServiceServer) Get(context.Context, *GetRequest) (*GetCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetCardServiceServer) mustEmbedUnimplementedGetCardServiceServer() {}
func (UnimplementedGetCardServiceServer) testEmbeddedByValue()                        {}

// UnsafeGetCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetCardServiceServer will
// result in compilation errors.
type UnsafeGetCardServiceServer interface {
	mustEmbedUnimplementedGetCardServiceServer()
}

func RegisterGetCardServiceServer(s grpc.ServiceRegistrar, srv GetCardServiceServer) {
	// If the following call pancis, it indicates UnimplementedGetCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetCardService_ServiceDesc, srv)
}

func _GetCardService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetCardServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetCardService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetCardServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetCardService_ServiceDesc is the grpc.ServiceDesc for GetCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.grpc.GetCardService",
	HandlerType: (*GetCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetCardService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/get.proto",
}
