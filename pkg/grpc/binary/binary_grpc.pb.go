// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: binary.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BinaryReadService_Get_FullMethodName  = "/binary.BinaryReadService/Get"
	BinaryReadService_List_FullMethodName = "/binary.BinaryReadService/List"
)

// BinaryReadServiceClient is the client API for BinaryReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryReadServiceClient interface {
	Get(ctx context.Context, in *BinaryGetRequest, opts ...grpc.CallOption) (*BinaryDB, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BinaryDB], error)
}

type binaryReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryReadServiceClient(cc grpc.ClientConnInterface) BinaryReadServiceClient {
	return &binaryReadServiceClient{cc}
}

func (c *binaryReadServiceClient) Get(ctx context.Context, in *BinaryGetRequest, opts ...grpc.CallOption) (*BinaryDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinaryDB)
	err := c.cc.Invoke(ctx, BinaryReadService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryReadServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BinaryDB], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BinaryReadService_ServiceDesc.Streams[0], BinaryReadService_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, BinaryDB]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryReadService_ListClient = grpc.ServerStreamingClient[BinaryDB]

// BinaryReadServiceServer is the server API for BinaryReadService service.
// All implementations must embed UnimplementedBinaryReadServiceServer
// for forward compatibility.
type BinaryReadServiceServer interface {
	Get(context.Context, *BinaryGetRequest) (*BinaryDB, error)
	List(*emptypb.Empty, grpc.ServerStreamingServer[BinaryDB]) error
	mustEmbedUnimplementedBinaryReadServiceServer()
}

// UnimplementedBinaryReadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBinaryReadServiceServer struct{}

func (UnimplementedBinaryReadServiceServer) Get(context.Context, *BinaryGetRequest) (*BinaryDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBinaryReadServiceServer) List(*emptypb.Empty, grpc.ServerStreamingServer[BinaryDB]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBinaryReadServiceServer) mustEmbedUnimplementedBinaryReadServiceServer() {}
func (UnimplementedBinaryReadServiceServer) testEmbeddedByValue()                           {}

// UnsafeBinaryReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryReadServiceServer will
// result in compilation errors.
type UnsafeBinaryReadServiceServer interface {
	mustEmbedUnimplementedBinaryReadServiceServer()
}

func RegisterBinaryReadServiceServer(s grpc.ServiceRegistrar, srv BinaryReadServiceServer) {
	// If the following call pancis, it indicates UnimplementedBinaryReadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BinaryReadService_ServiceDesc, srv)
}

func _BinaryReadService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryReadServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryReadService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryReadServiceServer).Get(ctx, req.(*BinaryGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryReadService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BinaryReadServiceServer).List(m, &grpc.GenericServerStream[emptypb.Empty, BinaryDB]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryReadService_ListServer = grpc.ServerStreamingServer[BinaryDB]

// BinaryReadService_ServiceDesc is the grpc.ServiceDesc for BinaryReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binary.BinaryReadService",
	HandlerType: (*BinaryReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BinaryReadService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _BinaryReadService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "binary.proto",
}

const (
	BinaryWriteService_Add_FullMethodName    = "/binary.BinaryWriteService/Add"
	BinaryWriteService_Delete_FullMethodName = "/binary.BinaryWriteService/Delete"
)

// BinaryWriteServiceClient is the client API for BinaryWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryWriteServiceClient interface {
	Add(ctx context.Context, in *BinaryAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *BinaryDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type binaryWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryWriteServiceClient(cc grpc.ClientConnInterface) BinaryWriteServiceClient {
	return &binaryWriteServiceClient{cc}
}

func (c *binaryWriteServiceClient) Add(ctx context.Context, in *BinaryAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BinaryWriteService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryWriteServiceClient) Delete(ctx context.Context, in *BinaryDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BinaryWriteService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryWriteServiceServer is the server API for BinaryWriteService service.
// All implementations must embed UnimplementedBinaryWriteServiceServer
// for forward compatibility.
type BinaryWriteServiceServer interface {
	Add(context.Context, *BinaryAddRequest) (*emptypb.Empty, error)
	Delete(context.Context, *BinaryDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBinaryWriteServiceServer()
}

// UnimplementedBinaryWriteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBinaryWriteServiceServer struct{}

func (UnimplementedBinaryWriteServiceServer) Add(context.Context, *BinaryAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBinaryWriteServiceServer) Delete(context.Context, *BinaryDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBinaryWriteServiceServer) mustEmbedUnimplementedBinaryWriteServiceServer() {}
func (UnimplementedBinaryWriteServiceServer) testEmbeddedByValue()                            {}

// UnsafeBinaryWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryWriteServiceServer will
// result in compilation errors.
type UnsafeBinaryWriteServiceServer interface {
	mustEmbedUnimplementedBinaryWriteServiceServer()
}

func RegisterBinaryWriteServiceServer(s grpc.ServiceRegistrar, srv BinaryWriteServiceServer) {
	// If the following call pancis, it indicates UnimplementedBinaryWriteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BinaryWriteService_ServiceDesc, srv)
}

func _BinaryWriteService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryWriteServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryWriteService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryWriteServiceServer).Add(ctx, req.(*BinaryAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryWriteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryWriteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryWriteService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryWriteServiceServer).Delete(ctx, req.(*BinaryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryWriteService_ServiceDesc is the grpc.ServiceDesc for BinaryWriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryWriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binary.BinaryWriteService",
	HandlerType: (*BinaryWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BinaryWriteService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BinaryWriteService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binary.proto",
}
