// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: username_password.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UsernamePasswordAddService_Add_FullMethodName = "/username_password.UsernamePasswordAddService/Add"
)

// UsernamePasswordAddServiceClient is the client API for UsernamePasswordAddService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsernamePasswordAddServiceClient interface {
	Add(ctx context.Context, in *UsernamePasswordAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type usernamePasswordAddServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsernamePasswordAddServiceClient(cc grpc.ClientConnInterface) UsernamePasswordAddServiceClient {
	return &usernamePasswordAddServiceClient{cc}
}

func (c *usernamePasswordAddServiceClient) Add(ctx context.Context, in *UsernamePasswordAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsernamePasswordAddService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsernamePasswordAddServiceServer is the server API for UsernamePasswordAddService service.
// All implementations must embed UnimplementedUsernamePasswordAddServiceServer
// for forward compatibility.
type UsernamePasswordAddServiceServer interface {
	Add(context.Context, *UsernamePasswordAddRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUsernamePasswordAddServiceServer()
}

// UnimplementedUsernamePasswordAddServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsernamePasswordAddServiceServer struct{}

func (UnimplementedUsernamePasswordAddServiceServer) Add(context.Context, *UsernamePasswordAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedUsernamePasswordAddServiceServer) mustEmbedUnimplementedUsernamePasswordAddServiceServer() {
}
func (UnimplementedUsernamePasswordAddServiceServer) testEmbeddedByValue() {}

// UnsafeUsernamePasswordAddServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsernamePasswordAddServiceServer will
// result in compilation errors.
type UnsafeUsernamePasswordAddServiceServer interface {
	mustEmbedUnimplementedUsernamePasswordAddServiceServer()
}

func RegisterUsernamePasswordAddServiceServer(s grpc.ServiceRegistrar, srv UsernamePasswordAddServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsernamePasswordAddServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsernamePasswordAddService_ServiceDesc, srv)
}

func _UsernamePasswordAddService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernamePasswordAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsernamePasswordAddServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsernamePasswordAddService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsernamePasswordAddServiceServer).Add(ctx, req.(*UsernamePasswordAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsernamePasswordAddService_ServiceDesc is the grpc.ServiceDesc for UsernamePasswordAddService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsernamePasswordAddService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "username_password.UsernamePasswordAddService",
	HandlerType: (*UsernamePasswordAddServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _UsernamePasswordAddService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "username_password.proto",
}

const (
	UsernamePasswordGetService_Get_FullMethodName = "/username_password.UsernamePasswordGetService/Get"
)

// UsernamePasswordGetServiceClient is the client API for UsernamePasswordGetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsernamePasswordGetServiceClient interface {
	Get(ctx context.Context, in *UsernamePasswordGetRequest, opts ...grpc.CallOption) (*UsernamePasswordGetResponse, error)
}

type usernamePasswordGetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsernamePasswordGetServiceClient(cc grpc.ClientConnInterface) UsernamePasswordGetServiceClient {
	return &usernamePasswordGetServiceClient{cc}
}

func (c *usernamePasswordGetServiceClient) Get(ctx context.Context, in *UsernamePasswordGetRequest, opts ...grpc.CallOption) (*UsernamePasswordGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsernamePasswordGetResponse)
	err := c.cc.Invoke(ctx, UsernamePasswordGetService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsernamePasswordGetServiceServer is the server API for UsernamePasswordGetService service.
// All implementations must embed UnimplementedUsernamePasswordGetServiceServer
// for forward compatibility.
type UsernamePasswordGetServiceServer interface {
	Get(context.Context, *UsernamePasswordGetRequest) (*UsernamePasswordGetResponse, error)
	mustEmbedUnimplementedUsernamePasswordGetServiceServer()
}

// UnimplementedUsernamePasswordGetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsernamePasswordGetServiceServer struct{}

func (UnimplementedUsernamePasswordGetServiceServer) Get(context.Context, *UsernamePasswordGetRequest) (*UsernamePasswordGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUsernamePasswordGetServiceServer) mustEmbedUnimplementedUsernamePasswordGetServiceServer() {
}
func (UnimplementedUsernamePasswordGetServiceServer) testEmbeddedByValue() {}

// UnsafeUsernamePasswordGetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsernamePasswordGetServiceServer will
// result in compilation errors.
type UnsafeUsernamePasswordGetServiceServer interface {
	mustEmbedUnimplementedUsernamePasswordGetServiceServer()
}

func RegisterUsernamePasswordGetServiceServer(s grpc.ServiceRegistrar, srv UsernamePasswordGetServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsernamePasswordGetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsernamePasswordGetService_ServiceDesc, srv)
}

func _UsernamePasswordGetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernamePasswordGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsernamePasswordGetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsernamePasswordGetService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsernamePasswordGetServiceServer).Get(ctx, req.(*UsernamePasswordGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsernamePasswordGetService_ServiceDesc is the grpc.ServiceDesc for UsernamePasswordGetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsernamePasswordGetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "username_password.UsernamePasswordGetService",
	HandlerType: (*UsernamePasswordGetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UsernamePasswordGetService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "username_password.proto",
}

const (
	UsernamePasswordListService_List_FullMethodName = "/username_password.UsernamePasswordListService/List"
)

// UsernamePasswordListServiceClient is the client API for UsernamePasswordListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsernamePasswordListServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UsernamePasswordListResponse, error)
}

type usernamePasswordListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsernamePasswordListServiceClient(cc grpc.ClientConnInterface) UsernamePasswordListServiceClient {
	return &usernamePasswordListServiceClient{cc}
}

func (c *usernamePasswordListServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UsernamePasswordListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsernamePasswordListResponse)
	err := c.cc.Invoke(ctx, UsernamePasswordListService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsernamePasswordListServiceServer is the server API for UsernamePasswordListService service.
// All implementations must embed UnimplementedUsernamePasswordListServiceServer
// for forward compatibility.
type UsernamePasswordListServiceServer interface {
	List(context.Context, *emptypb.Empty) (*UsernamePasswordListResponse, error)
	mustEmbedUnimplementedUsernamePasswordListServiceServer()
}

// UnimplementedUsernamePasswordListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsernamePasswordListServiceServer struct{}

func (UnimplementedUsernamePasswordListServiceServer) List(context.Context, *emptypb.Empty) (*UsernamePasswordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUsernamePasswordListServiceServer) mustEmbedUnimplementedUsernamePasswordListServiceServer() {
}
func (UnimplementedUsernamePasswordListServiceServer) testEmbeddedByValue() {}

// UnsafeUsernamePasswordListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsernamePasswordListServiceServer will
// result in compilation errors.
type UnsafeUsernamePasswordListServiceServer interface {
	mustEmbedUnimplementedUsernamePasswordListServiceServer()
}

func RegisterUsernamePasswordListServiceServer(s grpc.ServiceRegistrar, srv UsernamePasswordListServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsernamePasswordListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsernamePasswordListService_ServiceDesc, srv)
}

func _UsernamePasswordListService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsernamePasswordListServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsernamePasswordListService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsernamePasswordListServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UsernamePasswordListService_ServiceDesc is the grpc.ServiceDesc for UsernamePasswordListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsernamePasswordListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "username_password.UsernamePasswordListService",
	HandlerType: (*UsernamePasswordListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _UsernamePasswordListService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "username_password.proto",
}

const (
	UsernamePasswordDeleteService_Delete_FullMethodName = "/username_password.UsernamePasswordDeleteService/Delete"
)

// UsernamePasswordDeleteServiceClient is the client API for UsernamePasswordDeleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsernamePasswordDeleteServiceClient interface {
	Delete(ctx context.Context, in *UsernamePasswordDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type usernamePasswordDeleteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsernamePasswordDeleteServiceClient(cc grpc.ClientConnInterface) UsernamePasswordDeleteServiceClient {
	return &usernamePasswordDeleteServiceClient{cc}
}

func (c *usernamePasswordDeleteServiceClient) Delete(ctx context.Context, in *UsernamePasswordDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UsernamePasswordDeleteService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsernamePasswordDeleteServiceServer is the server API for UsernamePasswordDeleteService service.
// All implementations must embed UnimplementedUsernamePasswordDeleteServiceServer
// for forward compatibility.
type UsernamePasswordDeleteServiceServer interface {
	Delete(context.Context, *UsernamePasswordDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUsernamePasswordDeleteServiceServer()
}

// UnimplementedUsernamePasswordDeleteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsernamePasswordDeleteServiceServer struct{}

func (UnimplementedUsernamePasswordDeleteServiceServer) Delete(context.Context, *UsernamePasswordDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUsernamePasswordDeleteServiceServer) mustEmbedUnimplementedUsernamePasswordDeleteServiceServer() {
}
func (UnimplementedUsernamePasswordDeleteServiceServer) testEmbeddedByValue() {}

// UnsafeUsernamePasswordDeleteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsernamePasswordDeleteServiceServer will
// result in compilation errors.
type UnsafeUsernamePasswordDeleteServiceServer interface {
	mustEmbedUnimplementedUsernamePasswordDeleteServiceServer()
}

func RegisterUsernamePasswordDeleteServiceServer(s grpc.ServiceRegistrar, srv UsernamePasswordDeleteServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsernamePasswordDeleteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsernamePasswordDeleteService_ServiceDesc, srv)
}

func _UsernamePasswordDeleteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernamePasswordDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsernamePasswordDeleteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsernamePasswordDeleteService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsernamePasswordDeleteServiceServer).Delete(ctx, req.(*UsernamePasswordDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsernamePasswordDeleteService_ServiceDesc is the grpc.ServiceDesc for UsernamePasswordDeleteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsernamePasswordDeleteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "username_password.UsernamePasswordDeleteService",
	HandlerType: (*UsernamePasswordDeleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _UsernamePasswordDeleteService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "username_password.proto",
}
