// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api/protos/list.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ListService_ListUsernamePassword_FullMethodName = "/gophkeeper.grpc.ListService/ListUsernamePassword"
	ListService_ListText_FullMethodName             = "/gophkeeper.grpc.ListService/ListText"
	ListService_ListBinary_FullMethodName           = "/gophkeeper.grpc.ListService/ListBinary"
	ListService_ListBankCard_FullMethodName         = "/gophkeeper.grpc.ListService/ListBankCard"
)

// ListServiceClient is the client API for ListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис получения списков секретов
type ListServiceClient interface {
	ListUsernamePassword(ctx context.Context, in *ListUsernamePasswordRequest, opts ...grpc.CallOption) (*ListUsernamePasswordResponse, error)
	ListText(ctx context.Context, in *ListTextRequest, opts ...grpc.CallOption) (*ListTextResponse, error)
	ListBinary(ctx context.Context, in *ListBinaryRequest, opts ...grpc.CallOption) (*ListBinaryResponse, error)
	ListBankCard(ctx context.Context, in *ListBankCardRequest, opts ...grpc.CallOption) (*ListBankCardResponse, error)
}

type listServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListServiceClient(cc grpc.ClientConnInterface) ListServiceClient {
	return &listServiceClient{cc}
}

func (c *listServiceClient) ListUsernamePassword(ctx context.Context, in *ListUsernamePasswordRequest, opts ...grpc.CallOption) (*ListUsernamePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsernamePasswordResponse)
	err := c.cc.Invoke(ctx, ListService_ListUsernamePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) ListText(ctx context.Context, in *ListTextRequest, opts ...grpc.CallOption) (*ListTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTextResponse)
	err := c.cc.Invoke(ctx, ListService_ListText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) ListBinary(ctx context.Context, in *ListBinaryRequest, opts ...grpc.CallOption) (*ListBinaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBinaryResponse)
	err := c.cc.Invoke(ctx, ListService_ListBinary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) ListBankCard(ctx context.Context, in *ListBankCardRequest, opts ...grpc.CallOption) (*ListBankCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBankCardResponse)
	err := c.cc.Invoke(ctx, ListService_ListBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListServiceServer is the server API for ListService service.
// All implementations must embed UnimplementedListServiceServer
// for forward compatibility.
//
// Сервис получения списков секретов
type ListServiceServer interface {
	ListUsernamePassword(context.Context, *ListUsernamePasswordRequest) (*ListUsernamePasswordResponse, error)
	ListText(context.Context, *ListTextRequest) (*ListTextResponse, error)
	ListBinary(context.Context, *ListBinaryRequest) (*ListBinaryResponse, error)
	ListBankCard(context.Context, *ListBankCardRequest) (*ListBankCardResponse, error)
	mustEmbedUnimplementedListServiceServer()
}

// UnimplementedListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListServiceServer struct{}

func (UnimplementedListServiceServer) ListUsernamePassword(context.Context, *ListUsernamePasswordRequest) (*ListUsernamePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsernamePassword not implemented")
}
func (UnimplementedListServiceServer) ListText(context.Context, *ListTextRequest) (*ListTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListText not implemented")
}
func (UnimplementedListServiceServer) ListBinary(context.Context, *ListBinaryRequest) (*ListBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBinary not implemented")
}
func (UnimplementedListServiceServer) ListBankCard(context.Context, *ListBankCardRequest) (*ListBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBankCard not implemented")
}
func (UnimplementedListServiceServer) mustEmbedUnimplementedListServiceServer() {}
func (UnimplementedListServiceServer) testEmbeddedByValue()                     {}

// UnsafeListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListServiceServer will
// result in compilation errors.
type UnsafeListServiceServer interface {
	mustEmbedUnimplementedListServiceServer()
}

func RegisterListServiceServer(s grpc.ServiceRegistrar, srv ListServiceServer) {
	// If the following call pancis, it indicates UnimplementedListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListService_ServiceDesc, srv)
}

func _ListService_ListUsernamePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsernamePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).ListUsernamePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_ListUsernamePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).ListUsernamePassword(ctx, req.(*ListUsernamePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_ListText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).ListText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_ListText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).ListText(ctx, req.(*ListTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_ListBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).ListBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_ListBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).ListBinary(ctx, req.(*ListBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_ListBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).ListBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_ListBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).ListBankCard(ctx, req.(*ListBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListService_ServiceDesc is the grpc.ServiceDesc for ListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.grpc.ListService",
	HandlerType: (*ListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsernamePassword",
			Handler:    _ListService_ListUsernamePassword_Handler,
		},
		{
			MethodName: "ListText",
			Handler:    _ListService_ListText_Handler,
		},
		{
			MethodName: "ListBinary",
			Handler:    _ListService_ListBinary_Handler,
		},
		{
			MethodName: "ListBankCard",
			Handler:    _ListService_ListBankCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/list.proto",
}
