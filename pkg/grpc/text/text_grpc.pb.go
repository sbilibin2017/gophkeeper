// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: text.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TextReadService_Get_FullMethodName  = "/text.TextReadService/Get"
	TextReadService_List_FullMethodName = "/text.TextReadService/List"
)

// TextReadServiceClient is the client API for TextReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextReadServiceClient interface {
	Get(ctx context.Context, in *TextGetRequest, opts ...grpc.CallOption) (*TextDB, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TextDB], error)
}

type textReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextReadServiceClient(cc grpc.ClientConnInterface) TextReadServiceClient {
	return &textReadServiceClient{cc}
}

func (c *textReadServiceClient) Get(ctx context.Context, in *TextGetRequest, opts ...grpc.CallOption) (*TextDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextDB)
	err := c.cc.Invoke(ctx, TextReadService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textReadServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TextDB], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TextReadService_ServiceDesc.Streams[0], TextReadService_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, TextDB]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TextReadService_ListClient = grpc.ServerStreamingClient[TextDB]

// TextReadServiceServer is the server API for TextReadService service.
// All implementations must embed UnimplementedTextReadServiceServer
// for forward compatibility.
type TextReadServiceServer interface {
	Get(context.Context, *TextGetRequest) (*TextDB, error)
	List(*emptypb.Empty, grpc.ServerStreamingServer[TextDB]) error
	mustEmbedUnimplementedTextReadServiceServer()
}

// UnimplementedTextReadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextReadServiceServer struct{}

func (UnimplementedTextReadServiceServer) Get(context.Context, *TextGetRequest) (*TextDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTextReadServiceServer) List(*emptypb.Empty, grpc.ServerStreamingServer[TextDB]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTextReadServiceServer) mustEmbedUnimplementedTextReadServiceServer() {}
func (UnimplementedTextReadServiceServer) testEmbeddedByValue()                         {}

// UnsafeTextReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextReadServiceServer will
// result in compilation errors.
type UnsafeTextReadServiceServer interface {
	mustEmbedUnimplementedTextReadServiceServer()
}

func RegisterTextReadServiceServer(s grpc.ServiceRegistrar, srv TextReadServiceServer) {
	// If the following call pancis, it indicates UnimplementedTextReadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextReadService_ServiceDesc, srv)
}

func _TextReadService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextReadServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextReadService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextReadServiceServer).Get(ctx, req.(*TextGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextReadService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextReadServiceServer).List(m, &grpc.GenericServerStream[emptypb.Empty, TextDB]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TextReadService_ListServer = grpc.ServerStreamingServer[TextDB]

// TextReadService_ServiceDesc is the grpc.ServiceDesc for TextReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text.TextReadService",
	HandlerType: (*TextReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TextReadService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _TextReadService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "text.proto",
}

const (
	TextWriteService_Add_FullMethodName    = "/text.TextWriteService/Add"
	TextWriteService_Delete_FullMethodName = "/text.TextWriteService/Delete"
)

// TextWriteServiceClient is the client API for TextWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextWriteServiceClient interface {
	Add(ctx context.Context, in *TextAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *TextDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type textWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextWriteServiceClient(cc grpc.ClientConnInterface) TextWriteServiceClient {
	return &textWriteServiceClient{cc}
}

func (c *textWriteServiceClient) Add(ctx context.Context, in *TextAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TextWriteService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textWriteServiceClient) Delete(ctx context.Context, in *TextDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TextWriteService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextWriteServiceServer is the server API for TextWriteService service.
// All implementations must embed UnimplementedTextWriteServiceServer
// for forward compatibility.
type TextWriteServiceServer interface {
	Add(context.Context, *TextAddRequest) (*emptypb.Empty, error)
	Delete(context.Context, *TextDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTextWriteServiceServer()
}

// UnimplementedTextWriteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextWriteServiceServer struct{}

func (UnimplementedTextWriteServiceServer) Add(context.Context, *TextAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTextWriteServiceServer) Delete(context.Context, *TextDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTextWriteServiceServer) mustEmbedUnimplementedTextWriteServiceServer() {}
func (UnimplementedTextWriteServiceServer) testEmbeddedByValue()                          {}

// UnsafeTextWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextWriteServiceServer will
// result in compilation errors.
type UnsafeTextWriteServiceServer interface {
	mustEmbedUnimplementedTextWriteServiceServer()
}

func RegisterTextWriteServiceServer(s grpc.ServiceRegistrar, srv TextWriteServiceServer) {
	// If the following call pancis, it indicates UnimplementedTextWriteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextWriteService_ServiceDesc, srv)
}

func _TextWriteService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextWriteServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextWriteService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextWriteServiceServer).Add(ctx, req.(*TextAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextWriteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextWriteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextWriteService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextWriteServiceServer).Delete(ctx, req.(*TextDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextWriteService_ServiceDesc is the grpc.ServiceDesc for TextWriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextWriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text.TextWriteService",
	HandlerType: (*TextWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _TextWriteService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TextWriteService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "text.proto",
}
