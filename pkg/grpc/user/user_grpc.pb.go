// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: user.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserReadService_Get_FullMethodName  = "/user.UserReadService/Get"
	UserReadService_List_FullMethodName = "/user.UserReadService/List"
)

// UserReadServiceClient is the client API for UserReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserReadServiceClient interface {
	Get(ctx context.Context, in *UserGetRequest, opts ...grpc.CallOption) (*UserDB, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserDB], error)
}

type userReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserReadServiceClient(cc grpc.ClientConnInterface) UserReadServiceClient {
	return &userReadServiceClient{cc}
}

func (c *userReadServiceClient) Get(ctx context.Context, in *UserGetRequest, opts ...grpc.CallOption) (*UserDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDB)
	err := c.cc.Invoke(ctx, UserReadService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReadServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserDB], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserReadService_ServiceDesc.Streams[0], UserReadService_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, UserDB]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserReadService_ListClient = grpc.ServerStreamingClient[UserDB]

// UserReadServiceServer is the server API for UserReadService service.
// All implementations must embed UnimplementedUserReadServiceServer
// for forward compatibility.
type UserReadServiceServer interface {
	Get(context.Context, *UserGetRequest) (*UserDB, error)
	List(*emptypb.Empty, grpc.ServerStreamingServer[UserDB]) error
	mustEmbedUnimplementedUserReadServiceServer()
}

// UnimplementedUserReadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserReadServiceServer struct{}

func (UnimplementedUserReadServiceServer) Get(context.Context, *UserGetRequest) (*UserDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserReadServiceServer) List(*emptypb.Empty, grpc.ServerStreamingServer[UserDB]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserReadServiceServer) mustEmbedUnimplementedUserReadServiceServer() {}
func (UnimplementedUserReadServiceServer) testEmbeddedByValue()                         {}

// UnsafeUserReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserReadServiceServer will
// result in compilation errors.
type UnsafeUserReadServiceServer interface {
	mustEmbedUnimplementedUserReadServiceServer()
}

func RegisterUserReadServiceServer(s grpc.ServiceRegistrar, srv UserReadServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserReadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserReadService_ServiceDesc, srv)
}

func _UserReadService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReadServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserReadService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReadServiceServer).Get(ctx, req.(*UserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReadService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserReadServiceServer).List(m, &grpc.GenericServerStream[emptypb.Empty, UserDB]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserReadService_ListServer = grpc.ServerStreamingServer[UserDB]

// UserReadService_ServiceDesc is the grpc.ServiceDesc for UserReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserReadService",
	HandlerType: (*UserReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UserReadService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _UserReadService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}

const (
	UserWriteService_Add_FullMethodName    = "/user.UserWriteService/Add"
	UserWriteService_Delete_FullMethodName = "/user.UserWriteService/Delete"
)

// UserWriteServiceClient is the client API for UserWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserWriteServiceClient interface {
	Add(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserWriteServiceClient(cc grpc.ClientConnInterface) UserWriteServiceClient {
	return &userWriteServiceClient{cc}
}

func (c *userWriteServiceClient) Add(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserWriteService_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWriteServiceClient) Delete(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserWriteService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserWriteServiceServer is the server API for UserWriteService service.
// All implementations must embed UnimplementedUserWriteServiceServer
// for forward compatibility.
type UserWriteServiceServer interface {
	Add(context.Context, *UserAddRequest) (*emptypb.Empty, error)
	Delete(context.Context, *UserDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserWriteServiceServer()
}

// UnimplementedUserWriteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserWriteServiceServer struct{}

func (UnimplementedUserWriteServiceServer) Add(context.Context, *UserAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedUserWriteServiceServer) Delete(context.Context, *UserDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserWriteServiceServer) mustEmbedUnimplementedUserWriteServiceServer() {}
func (UnimplementedUserWriteServiceServer) testEmbeddedByValue()                          {}

// UnsafeUserWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserWriteServiceServer will
// result in compilation errors.
type UnsafeUserWriteServiceServer interface {
	mustEmbedUnimplementedUserWriteServiceServer()
}

func RegisterUserWriteServiceServer(s grpc.ServiceRegistrar, srv UserWriteServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserWriteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserWriteService_ServiceDesc, srv)
}

func _UserWriteService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWriteServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWriteService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWriteServiceServer).Add(ctx, req.(*UserAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWriteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWriteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWriteService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWriteServiceServer).Delete(ctx, req.(*UserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserWriteService_ServiceDesc is the grpc.ServiceDesc for UserWriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserWriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserWriteService",
	HandlerType: (*UserWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _UserWriteService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserWriteService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
