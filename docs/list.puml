@startuml
actor User
participant "GophKeeper CLI" as Client
participant AESGCM
participant RSAEncryptor
database "Local DB" as LDB
participant "LocalSecretKeyRepository" as KeyRepo

User -> Client: Запрос списка секретов (offline)

Client -> LDB: SecretReadRepository.List(userID)
LDB --> Client: []EncryptedSecret {EncryptedPayload, Nonce, SecretType, Meta, SecretID}

Client -> KeyRepo: GetSecretKey(secretID, deviceID)
KeyRepo --> Client: SecretKeyDB {EncryptedAESKey}

Client -> RSAEncryptor: DecryptAESKey(EncryptedAESKey)
RSAEncryptor --> Client: AESKey

Client -> AESGCM: Decrypt(EncryptedPayload, Nonce, AESKey)
AESGCM --> Client: plaintext

Client -> Client: Преобразовать в структуру по SecretType
Client --> Client: LoginPassword / TextNote / BinaryData / BankCard / Unknown

Client --> User: Список секретов (offline)
@enduml

@startuml
actor User
participant "GophKeeper CLI" as Client
participant AESGCM
participant RSAEncryptor
participant "API Server" as Server
participant "SecretKeyHTTPFacade" as KeyFacade

User -> Client: Запрос списка секретов (online)

Client -> Server: SecretHTTPFacade.List(ctx, token)
Server --> Client: []SecretResponse {EncryptedPayload, Nonce, SecretType, Meta, SecretID}

Client -> KeyFacade: Get(secretID, deviceID)
KeyFacade -> Server: GET /secret-keys?secret_id=...&device_id=...
Server --> KeyFacade: SecretKeyResponse {EncryptedAESKey, DeviceID}
KeyFacade --> Client: SecretKeyResponse {EncryptedAESKey, DeviceID}

Client -> RSAEncryptor: DecryptAESKey(EncryptedAESKey)
RSAEncryptor --> Client: AESKey

Client -> AESGCM: Decrypt(EncryptedPayload, Nonce, AESKey)
AESGCM --> Client: plaintext

Client -> Client: Преобразовать в структуру по SecretType
Client --> Client: LoginPassword / TextNote / BinaryData / BankCard / Unknown

Client --> User: Список секретов (online)
@enduml
