// Package http Code generated by swaggo/swag. DO NOT EDIT
package http

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticates user and returns JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate a user (login)",
                "parameters": [
                    {
                        "description": "Login request payload",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token returned in Authorization header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "invalid username or password",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Registers a user with username and password, returns JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Register request payload",
                        "name": "registerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token returned in Authorization header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "user already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secrets": {
            "get": {
                "description": "Returns all secrets belonging to the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secrets"
                ],
                "summary": "List all secrets for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.SecretResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to list secrets",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new secret for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secrets"
                ],
                "summary": "Add a new secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Secret data to save",
                        "name": "secret",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SecretSaveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to save secret",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secrets/{secret_type}/{secret_name}": {
            "get": {
                "description": "Retrieves a secret for the authenticated user by secret type and name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secrets"
                ],
                "summary": "Get a secret by type and name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "password",
                        "description": "Secret type",
                        "name": "secret_type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "my-bank-password",
                        "description": "Secret name",
                        "name": "secret_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SecretResponse"
                        }
                    },
                    "400": {
                        "description": "missing secret_type or secret_name URL parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to get secret",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password of the user\nexample: secret123",
                    "type": "string"
                },
                "username": {
                    "description": "Username of the user\nexample: johndoe",
                    "type": "string"
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password for the new user\nexample: secret123",
                    "type": "string"
                },
                "username": {
                    "description": "Username for the new user\nexample: johndoe",
                    "type": "string"
                }
            }
        },
        "handlers.SecretResponse": {
            "type": "object",
            "properties": {
                "aes_key_enc": {
                    "description": "AESKeyEnc is the encrypted AES key, base64 encoded.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "ciphertext": {
                    "description": "Ciphertext is the encrypted secret data, base64 encoded.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "secret_name": {
                    "description": "SecretName is the unique name of the secret.",
                    "type": "string"
                },
                "secret_type": {
                    "description": "SecretType represents the type/category of the secret.",
                    "type": "string"
                }
            }
        },
        "handlers.SecretSaveRequest": {
            "type": "object",
            "properties": {
                "aes_key_enc": {
                    "description": "AESKeyEnc is the encrypted AES key, base64 encoded.\nexample: U29tZUVuY3J5cHRlZEtleQ==",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "ciphertext": {
                    "description": "Ciphertext is the encrypted secret data, base64 encoded.\nexample: SGVsbG8sIHNlY3JldCE=",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "secret_name": {
                    "description": "SecretName is the unique name of the secret.\nexample: my-bank-password",
                    "type": "string"
                },
                "secret_type": {
                    "description": "SecretType represents the type/category of the secret.\nexample: password",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
