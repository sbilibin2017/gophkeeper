// Package http Code generated by swaggo/swag. DO NOT EDIT
package http

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Проверяет логин и пароль, а также устройство. Генерирует JWT токен и возвращает его в заголовке Authorization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Аутентификация пользователя",
                "parameters": [
                    {
                        "description": "Запрос на аутентификацию пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная аутентификация, токен в заголовке Authorization",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос или устройство не найдено",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Неверный логин или пароль",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Создает новый аккаунт пользователя, генерирует пару ключей RSA, возвращает приватный ключ и ID устройства. Токен JWT возвращается в заголовке.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Запрос на регистрацию пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная регистрация",
                        "schema": {
                            "$ref": "#/definitions/models.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос или невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Пользователь с таким именем уже существует",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/device/get": {
            "get": {
                "description": "Извлекает информацию о текущем устройстве по JWT токену из запроса",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Получение информации об устройстве",
                "responses": {
                    "200": {
                        "description": "Информация об устройстве",
                        "schema": {
                            "$ref": "#/definitions/models.DeviceResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный токен или некорректный запрос",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Неавторизованный доступ, неверный токен",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Устройство не найдено",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secret-key/get/{secret-id}": {
            "get": {
                "description": "Извлекает секретный ключ по secret-id из URL и возвращает данные ключа",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secret-key"
                ],
                "summary": "Получение информации о секретном ключе",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID секрета",
                        "name": "secret-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о секретном ключе",
                        "schema": {
                            "$ref": "#/definitions/models.SecretKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный токен или некорректный запрос"
                    },
                    "401": {
                        "description": "Неавторизованный доступ"
                    },
                    "404": {
                        "description": "Секретный ключ не найден"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/secret-key/save": {
            "post": {
                "description": "Сохраняет новый секретный ключ пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secret-key"
                ],
                "summary": "Сохранение нового секретного ключа",
                "parameters": [
                    {
                        "description": "Данные секретного ключа для сохранения",
                        "name": "secretKey",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SecretKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Секретный ключ успешно сохранен"
                    },
                    "400": {
                        "description": "Неверный токен или некорректный запрос"
                    },
                    "401": {
                        "description": "Неавторизованный доступ"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера"
                    }
                }
            }
        },
        "/secret/get/{secret-id}": {
            "get": {
                "description": "Возвращает данные секрета пользователя по ID секрета",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secret"
                ],
                "summary": "Получение секрета по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID секрета",
                        "name": "secret-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SecretResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос или отсутствует ID секрета",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Неавторизованный доступ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Секрет не найден",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secret/list": {
            "get": {
                "description": "Возвращает список всех секретов текущего пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secret"
                ],
                "summary": "Получение списка всех секретов пользователя",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SecretResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Неавторизованный доступ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secret/save": {
            "post": {
                "description": "Сохраняет новый секрет пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secret"
                ],
                "summary": "Сохранение нового секрета",
                "parameters": [
                    {
                        "description": "Данные секрета для сохранения",
                        "name": "secret",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SecretRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Секрет успешно сохранен",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Неавторизованный доступ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.DeviceResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Дата создания устройства\nexample: 2025-08-17T12:34:56Z\ndefault: 2025-08-17T12:34:56Z",
                    "type": "string"
                },
                "device_id": {
                    "description": "Уникальный идентификатор устройства\nexample: \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"\ndefault: \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                    "type": "string"
                },
                "public_key": {
                    "description": "Публичный ключ устройства\nexample: |\n  -----BEGIN PUBLIC KEY-----\n  MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu7pM4h2...\n  -----END PUBLIC KEY-----\ndefault: |\n  -----BEGIN PUBLIC KEY-----\n  MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu7pM4h2...\n  -----END PUBLIC KEY-----",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Дата последнего обновления данных устройства\nexample: 2025-08-17T12:45:00Z\ndefault: 2025-08-17T12:45:00Z",
                    "type": "string"
                },
                "user_id": {
                    "description": "Идентификатор пользователя-владельца устройства\nexample: \"c56a4180-65aa-42ec-a945-5fd21dec0538\"\ndefault: \"c56a4180-65aa-42ec-a945-5fd21dec0538\"",
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "properties": {
                "device_id": {
                    "description": "Уникальный идентификатор устройства\nrequired: true\nexample: \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                    "type": "string"
                },
                "password": {
                    "description": "Пароль пользователя\nrequired: true\nexample: Secret123!",
                    "type": "string"
                },
                "username": {
                    "description": "Имя пользователя\nrequired: true\nexample: johndoe",
                    "type": "string"
                }
            }
        },
        "models.RegisterRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Пароль пользователя\nrequired: true\nexample: Secret123!",
                    "type": "string"
                },
                "username": {
                    "description": "Имя пользователя\nrequired: true\nexample: johndoe",
                    "type": "string"
                }
            }
        },
        "models.RegisterResponse": {
            "type": "object",
            "properties": {
                "device_id": {
                    "description": "Уникальный идентификатор устройства\nrequired: true\nexample: \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                    "type": "string"
                },
                "private_key": {
                    "description": "Приватный ключ RSA (PEM кодирование)\nrequired: true\nexample: |\n  -----BEGIN RSA PRIVATE KEY-----\n  MIIEpAIBAAKCAQEAu7pM4h2...\n  -----END RSA PRIVATE KEY-----",
                    "type": "string"
                },
                "token": {
                    "description": "JWT токен пользователя\nrequired: true\nexample: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string"
                },
                "user_id": {
                    "description": "Уникальный идентификатор пользователя\nrequired: true\nexample: \"c56a4180-65aa-42ec-a945-5fd21dec0538\"",
                    "type": "string"
                }
            }
        },
        "models.SecretKeyRequest": {
            "type": "object",
            "properties": {
                "device_id": {
                    "description": "Идентификатор устройства\nexample: \"device-67890\"\ndefault: \"device-67890\"",
                    "type": "string"
                },
                "encrypted_aes_key": {
                    "description": "AES ключ, зашифрованный публичным ключом устройства\nexample: \"U2FsdGVkX1+abcd1234efgh5678ijkl90==\"\ndefault: \"U2FsdGVkX1+abcd1234efgh5678ijkl90==\"",
                    "type": "string"
                },
                "secret_id": {
                    "description": "Идентификатор секрета\nexample: \"secret-12345\"\ndefault: \"secret-12345\"",
                    "type": "string"
                }
            }
        },
        "models.SecretKeyResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Дата создания записи\nexample: 2025-08-17T12:34:56Z\ndefault: 2025-08-17T12:34:56Z",
                    "type": "string"
                },
                "device_id": {
                    "description": "Идентификатор устройства\nexample: \"device-67890\"\ndefault: \"device-67890\"",
                    "type": "string"
                },
                "encrypted_aes_key": {
                    "description": "AES ключ, зашифрованный публичным ключом устройства\nexample: \"U2FsdGVkX1+abcd1234efgh5678ijkl90==\"\ndefault: \"U2FsdGVkX1+abcd1234efgh5678ijkl90==\"",
                    "type": "string"
                },
                "secret_id": {
                    "description": "Идентификатор секрета\nexample: \"secret-12345\"\ndefault: \"secret-12345\"",
                    "type": "string"
                },
                "secret_key_id": {
                    "description": "Уникальный идентификатор записи секретного ключа\nexample: \"a1b2c3d4-e5f6-7890-abcd-1234567890ef\"\ndefault: \"a1b2c3d4-e5f6-7890-abcd-1234567890ef\"",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Дата последнего обновления записи\nexample: 2025-08-17T12:45:00Z\ndefault: 2025-08-17T12:45:00Z",
                    "type": "string"
                }
            }
        },
        "models.SecretRequest": {
            "type": "object",
            "properties": {
                "encrypted_payload": {
                    "description": "Зашифрованное содержимое секрета\nexample: \"SGVsbG8gV29ybGQh\"\ndefault: \"SGVsbG8gV29ybGQh\"",
                    "type": "string"
                },
                "meta": {
                    "description": "Метаданные секрета в формате JSON\nexample: {\"url\":\"https://example.com\"}\ndefault: \"{\\\"url\\\":\\\"https://example.com\\\"}\"",
                    "type": "string"
                },
                "nonce": {
                    "description": "Nonce для шифрования\nexample: \"MTIzNDU2Nzg5MA==\"\ndefault: \"MTIzNDU2Nzg5MA==\"",
                    "type": "string"
                },
                "secret_name": {
                    "description": "Название секрета\nexample: \"my-password\"\ndefault: \"my-password\"",
                    "type": "string"
                },
                "secret_type": {
                    "description": "Тип секрета\nexample: \"password\"\ndefault: \"password\"",
                    "type": "string"
                },
                "user_id": {
                    "description": "Идентификатор пользователя\nexample: \"user789\"\ndefault: \"user789\"",
                    "type": "string"
                }
            }
        },
        "models.SecretResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Дата создания секрета\nexample: \"2025-08-17T12:00:00Z\"\ndefault: \"2025-08-17T12:00:00Z\"",
                    "type": "string"
                },
                "encrypted_payload": {
                    "description": "Зашифрованное содержимое секрета\nexample: \"U2FsdGVkX1+abc123xyz==\"\ndefault: \"U2FsdGVkX1+abc123xyz==\"",
                    "type": "string"
                },
                "meta": {
                    "description": "Метаданные секрета в формате JSON\nexample: \"{\\\"url\\\":\\\"https://example.com\\\",\\\"note\\\":\\\"для личного пользования\\\"}\"\ndefault: \"{\\\"url\\\":\\\"https://example.com\\\",\\\"note\\\":\\\"для личного пользования\\\"}\"",
                    "type": "string"
                },
                "nonce": {
                    "description": "Nonce для шифрования\nexample: \"bXlOb25jZQ==\"\ndefault: \"bXlOb25jZQ==\"",
                    "type": "string"
                },
                "secret_id": {
                    "description": "Уникальный идентификатор секрета\nexample: \"abc123\"\ndefault: \"abc123\"",
                    "type": "string"
                },
                "secret_name": {
                    "description": "Название секрета\nexample: \"MyBankPassword\"\ndefault: \"MyBankPassword\"",
                    "type": "string"
                },
                "secret_type": {
                    "description": "Тип секрета\nexample: \"password\"\ndefault: \"password\"",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Дата последнего обновления секрета\nexample: \"2025-08-17T12:30:00Z\"\ndefault: \"2025-08-17T12:30:00Z\"",
                    "type": "string"
                },
                "user_id": {
                    "description": "Идентификатор пользователя\nexample: \"user789\"\ndefault: \"user789\"",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Bearer токен для авторизации в формате: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "GophKeeper API",
	Description:      "API сервер для управления секретами.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
