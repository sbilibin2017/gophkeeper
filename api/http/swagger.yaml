basePath: /api/v1
definitions:
  models.DeviceResponse:
    properties:
      created_at:
        description: |-
          Дата создания устройства
          example: 2025-08-17T12:34:56Z
          default: 2025-08-17T12:34:56Z
        type: string
      device_id:
        description: |-
          Уникальный идентификатор устройства
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          default: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        type: string
      public_key:
        description: |-
          Публичный ключ устройства
          example: |
            -----BEGIN PUBLIC KEY-----
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu7pM4h2...
            -----END PUBLIC KEY-----
          default: |
            -----BEGIN PUBLIC KEY-----
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu7pM4h2...
            -----END PUBLIC KEY-----
        type: string
      updated_at:
        description: |-
          Дата последнего обновления данных устройства
          example: 2025-08-17T12:45:00Z
          default: 2025-08-17T12:45:00Z
        type: string
      user_id:
        description: |-
          Идентификатор пользователя-владельца устройства
          example: "c56a4180-65aa-42ec-a945-5fd21dec0538"
          default: "c56a4180-65aa-42ec-a945-5fd21dec0538"
        type: string
    type: object
  models.LoginRequest:
    properties:
      device_id:
        description: |-
          Уникальный идентификатор устройства
          required: true
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        type: string
      password:
        description: |-
          Пароль пользователя
          required: true
          example: Secret123!
        type: string
      username:
        description: |-
          Имя пользователя
          required: true
          example: johndoe
        type: string
    type: object
  models.RegisterRequest:
    properties:
      password:
        description: |-
          Пароль пользователя
          required: true
          example: Secret123!
        type: string
      username:
        description: |-
          Имя пользователя
          required: true
          example: johndoe
        type: string
    type: object
  models.RegisterResponse:
    properties:
      device_id:
        description: |-
          Уникальный идентификатор устройства
          required: true
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        type: string
      private_key:
        description: |-
          Приватный ключ RSA (PEM кодирование)
          required: true
          example: |
            -----BEGIN RSA PRIVATE KEY-----
            MIIEpAIBAAKCAQEAu7pM4h2...
            -----END RSA PRIVATE KEY-----
        type: string
      token:
        description: |-
          JWT токен пользователя
          required: true
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        type: string
      user_id:
        description: |-
          Уникальный идентификатор пользователя
          required: true
          example: "c56a4180-65aa-42ec-a945-5fd21dec0538"
        type: string
    type: object
  models.SecretKeyRequest:
    properties:
      device_id:
        description: |-
          Идентификатор устройства
          example: "device-67890"
          default: "device-67890"
        type: string
      encrypted_aes_key:
        description: |-
          AES ключ, зашифрованный публичным ключом устройства
          example: "U2FsdGVkX1+abcd1234efgh5678ijkl90=="
          default: "U2FsdGVkX1+abcd1234efgh5678ijkl90=="
        type: string
      secret_id:
        description: |-
          Идентификатор секрета
          example: "secret-12345"
          default: "secret-12345"
        type: string
    type: object
  models.SecretKeyResponse:
    properties:
      created_at:
        description: |-
          Дата создания записи
          example: 2025-08-17T12:34:56Z
          default: 2025-08-17T12:34:56Z
        type: string
      device_id:
        description: |-
          Идентификатор устройства
          example: "device-67890"
          default: "device-67890"
        type: string
      encrypted_aes_key:
        description: |-
          AES ключ, зашифрованный публичным ключом устройства
          example: "U2FsdGVkX1+abcd1234efgh5678ijkl90=="
          default: "U2FsdGVkX1+abcd1234efgh5678ijkl90=="
        type: string
      secret_id:
        description: |-
          Идентификатор секрета
          example: "secret-12345"
          default: "secret-12345"
        type: string
      secret_key_id:
        description: |-
          Уникальный идентификатор записи секретного ключа
          example: "a1b2c3d4-e5f6-7890-abcd-1234567890ef"
          default: "a1b2c3d4-e5f6-7890-abcd-1234567890ef"
        type: string
      updated_at:
        description: |-
          Дата последнего обновления записи
          example: 2025-08-17T12:45:00Z
          default: 2025-08-17T12:45:00Z
        type: string
    type: object
  models.SecretRequest:
    properties:
      encrypted_payload:
        description: |-
          Зашифрованное содержимое секрета
          example: "SGVsbG8gV29ybGQh"
          default: "SGVsbG8gV29ybGQh"
        type: string
      meta:
        description: |-
          Метаданные секрета в формате JSON
          example: {"url":"https://example.com"}
          default: "{\"url\":\"https://example.com\"}"
        type: string
      nonce:
        description: |-
          Nonce для шифрования
          example: "MTIzNDU2Nzg5MA=="
          default: "MTIzNDU2Nzg5MA=="
        type: string
      secret_name:
        description: |-
          Название секрета
          example: "my-password"
          default: "my-password"
        type: string
      secret_type:
        description: |-
          Тип секрета
          example: "password"
          default: "password"
        type: string
      user_id:
        description: |-
          Идентификатор пользователя
          example: "user789"
          default: "user789"
        type: string
    type: object
  models.SecretResponse:
    properties:
      created_at:
        description: |-
          Дата создания секрета
          example: "2025-08-17T12:00:00Z"
          default: "2025-08-17T12:00:00Z"
        type: string
      encrypted_payload:
        description: |-
          Зашифрованное содержимое секрета
          example: "U2FsdGVkX1+abc123xyz=="
          default: "U2FsdGVkX1+abc123xyz=="
        type: string
      meta:
        description: |-
          Метаданные секрета в формате JSON
          example: "{\"url\":\"https://example.com\",\"note\":\"для личного пользования\"}"
          default: "{\"url\":\"https://example.com\",\"note\":\"для личного пользования\"}"
        type: string
      nonce:
        description: |-
          Nonce для шифрования
          example: "bXlOb25jZQ=="
          default: "bXlOb25jZQ=="
        type: string
      secret_id:
        description: |-
          Уникальный идентификатор секрета
          example: "abc123"
          default: "abc123"
        type: string
      secret_name:
        description: |-
          Название секрета
          example: "MyBankPassword"
          default: "MyBankPassword"
        type: string
      secret_type:
        description: |-
          Тип секрета
          example: "password"
          default: "password"
        type: string
      updated_at:
        description: |-
          Дата последнего обновления секрета
          example: "2025-08-17T12:30:00Z"
          default: "2025-08-17T12:30:00Z"
        type: string
      user_id:
        description: |-
          Идентификатор пользователя
          example: "user789"
          default: "user789"
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API сервер для управления секретами.
  title: GophKeeper API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Проверяет логин и пароль, а также устройство. Генерирует JWT токен
        и возвращает его в заголовке Authorization.
      parameters:
      - description: Запрос на аутентификацию пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная аутентификация, токен в заголовке Authorization
          schema:
            type: string
        "400":
          description: Неверный запрос или устройство не найдено
          schema:
            type: string
        "401":
          description: Неверный логин или пароль
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Аутентификация пользователя
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создает новый аккаунт пользователя, генерирует пару ключей RSA,
        возвращает приватный ключ и ID устройства. Токен JWT возвращается в заголовке.
      parameters:
      - description: Запрос на регистрацию пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная регистрация
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Неверный запрос или невалидные данные
          schema:
            type: string
        "409":
          description: Пользователь с таким именем уже существует
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Регистрация нового пользователя
      tags:
      - auth
  /device/get:
    get:
      consumes:
      - application/json
      description: Извлекает информацию о текущем устройстве по JWT токену из запроса
      produces:
      - application/json
      responses:
        "200":
          description: Информация об устройстве
          schema:
            $ref: '#/definitions/models.DeviceResponse'
        "400":
          description: Неверный токен или некорректный запрос
          schema:
            type: string
        "401":
          description: Неавторизованный доступ, неверный токен
          schema:
            type: string
        "404":
          description: Устройство не найдено
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Получение информации об устройстве
      tags:
      - device
  /secret-key/get/{secret-id}:
    get:
      consumes:
      - application/json
      description: Извлекает секретный ключ по secret-id из URL и возвращает данные
        ключа
      parameters:
      - description: ID секрета
        in: path
        name: secret-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о секретном ключе
          schema:
            $ref: '#/definitions/models.SecretKeyResponse'
        "400":
          description: Неверный токен или некорректный запрос
        "401":
          description: Неавторизованный доступ
        "404":
          description: Секретный ключ не найден
        "500":
          description: Внутренняя ошибка сервера
      summary: Получение информации о секретном ключе
      tags:
      - secret-key
  /secret-key/save:
    post:
      consumes:
      - application/json
      description: Сохраняет новый секретный ключ пользователя
      parameters:
      - description: Данные секретного ключа для сохранения
        in: body
        name: secretKey
        required: true
        schema:
          $ref: '#/definitions/models.SecretKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Секретный ключ успешно сохранен
        "400":
          description: Неверный токен или некорректный запрос
        "401":
          description: Неавторизованный доступ
        "500":
          description: Внутренняя ошибка сервера
      summary: Сохранение нового секретного ключа
      tags:
      - secret-key
  /secret/get/{secret-id}:
    get:
      consumes:
      - application/json
      description: Возвращает данные секрета пользователя по ID секрета
      parameters:
      - description: ID секрета
        in: path
        name: secret-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SecretResponse'
        "400":
          description: Неверный запрос или отсутствует ID секрета
          schema:
            type: string
        "401":
          description: Неавторизованный доступ
          schema:
            type: string
        "404":
          description: Секрет не найден
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Получение секрета по ID
      tags:
      - secret
  /secret/list:
    get:
      consumes:
      - application/json
      description: Возвращает список всех секретов текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SecretResponse'
            type: array
        "400":
          description: Неверный запрос
          schema:
            type: string
        "401":
          description: Неавторизованный доступ
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Получение списка всех секретов пользователя
      tags:
      - secret
  /secret/save:
    post:
      consumes:
      - application/json
      description: Сохраняет новый секрет пользователя
      parameters:
      - description: Данные секрета для сохранения
        in: body
        name: secret
        required: true
        schema:
          $ref: '#/definitions/models.SecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Секрет успешно сохранен
          schema:
            type: string
        "400":
          description: Неверный запрос
          schema:
            type: string
        "401":
          description: Неавторизованный доступ
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      summary: Сохранение нового секрета
      tags:
      - secret
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'Bearer токен для авторизации в формате: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
