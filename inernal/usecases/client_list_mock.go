// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/inernal/usecases/client/list.go

// package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophkeeper/inernal/models"
)

// MockServerLister is a mock of ServerLister interface.
type MockServerLister struct {
	ctrl     *gomock.Controller
	recorder *MockServerListerMockRecorder
}

// MockServerListerMockRecorder is the mock recorder for MockServerLister.
type MockServerListerMockRecorder struct {
	mock *MockServerLister
}

// NewMockServerLister creates a new mock instance.
func NewMockServerLister(ctrl *gomock.Controller) *MockServerLister {
	mock := &MockServerLister{ctrl: ctrl}
	mock.recorder = &MockServerListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerLister) EXPECT() *MockServerListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockServerLister) List(ctx context.Context, req *models.SecretListRequest) ([]*models.SecretDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, req)
	ret0, _ := ret[0].([]*models.SecretDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServerListerMockRecorder) List(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServerLister)(nil).List), ctx, req)
}

// MockDecryptor is a mock of Decryptor interface.
type MockDecryptor struct {
	ctrl     *gomock.Controller
	recorder *MockDecryptorMockRecorder
}

// MockDecryptorMockRecorder is the mock recorder for MockDecryptor.
type MockDecryptorMockRecorder struct {
	mock *MockDecryptor
}

// NewMockDecryptor creates a new mock instance.
func NewMockDecryptor(ctrl *gomock.Controller) *MockDecryptor {
	mock := &MockDecryptor{ctrl: ctrl}
	mock.recorder = &MockDecryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecryptor) EXPECT() *MockDecryptorMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockDecryptor) Decrypt(enc *models.Encrypted) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", enc)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockDecryptorMockRecorder) Decrypt(enc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockDecryptor)(nil).Decrypt), enc)
}
