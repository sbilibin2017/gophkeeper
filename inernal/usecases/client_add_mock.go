// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/inernal/usecases/client/add.go

// package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophkeeper/inernal/models"
)

// MockClientSaver is a mock of ClientSaver interface.
type MockClientSaver struct {
	ctrl     *gomock.Controller
	recorder *MockClientSaverMockRecorder
}

// MockClientSaverMockRecorder is the mock recorder for MockClientSaver.
type MockClientSaverMockRecorder struct {
	mock *MockClientSaver
}

// NewMockClientSaver creates a new mock instance.
func NewMockClientSaver(ctrl *gomock.Controller) *MockClientSaver {
	mock := &MockClientSaver{ctrl: ctrl}
	mock.recorder = &MockClientSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientSaver) EXPECT() *MockClientSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockClientSaver) Save(ctx context.Context, secret *models.SecretDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockClientSaverMockRecorder) Save(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockClientSaver)(nil).Save), ctx, secret)
}

// MockEncryptor is a mock of Encryptor interface.
type MockEncryptor struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptorMockRecorder
}

// MockEncryptorMockRecorder is the mock recorder for MockEncryptor.
type MockEncryptorMockRecorder struct {
	mock *MockEncryptor
}

// NewMockEncryptor creates a new mock instance.
func NewMockEncryptor(ctrl *gomock.Controller) *MockEncryptor {
	mock := &MockEncryptor{ctrl: ctrl}
	mock.recorder = &MockEncryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptor) EXPECT() *MockEncryptorMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockEncryptor) Encrypt(plaintext []byte) (*models.Encrypted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", plaintext)
	ret0, _ := ret[0].(*models.Encrypted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptorMockRecorder) Encrypt(plaintext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptor)(nil).Encrypt), plaintext)
}
