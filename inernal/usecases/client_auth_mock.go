// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophkeeper/inernal/apps/client/auth.go

// package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophkeeper/inernal/models"
)

// MockUsernameValidator is a mock of UsernameValidator interface.
type MockUsernameValidator struct {
	ctrl     *gomock.Controller
	recorder *MockUsernameValidatorMockRecorder
}

// MockUsernameValidatorMockRecorder is the mock recorder for MockUsernameValidator.
type MockUsernameValidatorMockRecorder struct {
	mock *MockUsernameValidator
}

// NewMockUsernameValidator creates a new mock instance.
func NewMockUsernameValidator(ctrl *gomock.Controller) *MockUsernameValidator {
	mock := &MockUsernameValidator{ctrl: ctrl}
	mock.recorder = &MockUsernameValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsernameValidator) EXPECT() *MockUsernameValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockUsernameValidator) Validate(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockUsernameValidatorMockRecorder) Validate(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockUsernameValidator)(nil).Validate), username)
}

// MockPasswordValidator is a mock of PasswordValidator interface.
type MockPasswordValidator struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordValidatorMockRecorder
}

// MockPasswordValidatorMockRecorder is the mock recorder for MockPasswordValidator.
type MockPasswordValidatorMockRecorder struct {
	mock *MockPasswordValidator
}

// NewMockPasswordValidator creates a new mock instance.
func NewMockPasswordValidator(ctrl *gomock.Controller) *MockPasswordValidator {
	mock := &MockPasswordValidator{ctrl: ctrl}
	mock.recorder = &MockPasswordValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordValidator) EXPECT() *MockPasswordValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockPasswordValidator) Validate(password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockPasswordValidatorMockRecorder) Validate(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPasswordValidator)(nil).Validate), password)
}

// MockRegisterer is a mock of Registerer interface.
type MockRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockRegistererMockRecorder
}

// MockRegistererMockRecorder is the mock recorder for MockRegisterer.
type MockRegistererMockRecorder struct {
	mock *MockRegisterer
}

// NewMockRegisterer creates a new mock instance.
func NewMockRegisterer(ctrl *gomock.Controller) *MockRegisterer {
	mock := &MockRegisterer{ctrl: ctrl}
	mock.recorder = &MockRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterer) EXPECT() *MockRegistererMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterer) Register(ctx context.Context, req *models.AuthRegisterRequest) (*models.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(*models.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegistererMockRecorder) Register(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterer)(nil).Register), ctx, req)
}

// MockLoginer is a mock of Loginer interface.
type MockLoginer struct {
	ctrl     *gomock.Controller
	recorder *MockLoginerMockRecorder
}

// MockLoginerMockRecorder is the mock recorder for MockLoginer.
type MockLoginerMockRecorder struct {
	mock *MockLoginer
}

// NewMockLoginer creates a new mock instance.
func NewMockLoginer(ctrl *gomock.Controller) *MockLoginer {
	mock := &MockLoginer{ctrl: ctrl}
	mock.recorder = &MockLoginerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginer) EXPECT() *MockLoginerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginer) Login(ctx context.Context, req *models.AuthLoginRequest) (*models.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*models.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginerMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginer)(nil).Login), ctx, req)
}
